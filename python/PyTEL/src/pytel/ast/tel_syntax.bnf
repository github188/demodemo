
translation_unit    : external_decl_list
                    | translation_unit external_decl_list;
                    
external_decl_list : external_decl 
                   | external_decl_list external_decl                    
                    
external_decl       : external_declaration
                    | declaration_specifiers
                    | function_definition

external_declaration : pp_directive
pp_directive  : PPHASH

#need check the pattern 
function_definition : function_type_specifier FUNCTION identifier LPAREN param_type_list_opt RPAREN compound_statement ENDFUNCTION

statement   : labeled_statement
            | expression_statement
            | selection_statement
            | iteration_statement    
            | jump_statement
                                
declaration_specifiers  : type_qualifier type_specifier init_declarator_list SEMI
declaration_specifiers  : type_specifier init_declarator_list SEMI

declaration_specifiers_list : declaration_specifiers
                            | declaration_specifiers_list declaration_specifiers

function_type_specifier : VOID
                        | type_specifier
                                              
type_specifier : INTEGER
               | FLOAT
               | STRING
                            
type_qualifier  : CONST  
                            
init_declarator_list : init_declarator
                     | init_declarator_list COMMA init_declarator
                                    
init_declarator : variable_declarator
                | variable_declarator EQUALS initializer

variable_declarator : identifier '[' constant_expression ']'
                    | identifier '['     ']'
                    | identifier
                      
                                
parameter_list : parameter_declaration
               | parameter_list COMMA parameter_declaration

# string abc
parameter_declaration : type_specifier variable_declarator
                      | type_specifier BAND variable_declarator #output parameter
                
# a = 1
initializer : assignment_expression

# {1,2,3,{1,3,4,}, }
initializer : LBRACE initializer_list RBRACE
            | LBRACE initializer_list COMMA RBRACE

initializer_list : initializer
                 | initializer_list COMMA initializer
                 
compound_statement : statement_list 
compound_statement : declaration_specifiers_list 
compound_statement : declaration_specifiers_list statement_list

statement_list  : statement 
                | statement_list statement
                
labeled_statement : ID COLON statement
labeled_statement : CASE expression COLON statement
labeled_statement : DEFAULT COLON statement
selection_statement : IF LPAREN expression RPAREN statement ENDIF
selection_statement : IF LPAREN expression RPAREN statement ELSE statement ENDIF
selection_statement : SWITCH LPAREN expression RPAREN statement ENDSWITCH
iteration_statement : WHILE LPAREN expression RPAREN statement ENDWHILE
iteration_statement : DO statement WHILE LPAREN expression RPAREN 
iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement ENDFOR

jump_statement  : GOTO ID SEMI     ?does supported?
jump_statement  : BREAK SEMI
jump_statement  : CONTINUE SEMI
jump_statement  : RETURN expression SEMI  
                | RETURN SEMI 

#
# Expression 
#                     
expression_statement : expression SEMI 
                     | SEMI
expression  : assignment_expression 
            | expression COMMA assignment_expression

assignment_expression : conditional_expression
                      | variable_declarator assignment_operator conditional_expression
                        
assignment_operator : EQUALS
                                
constant_expression : conditional_expression
conditional_expression  : binary_expression
                        
binary_expression   : unary_expression
                    | binary_expression TIMES binary_expression
                    | binary_expression DIVIDE binary_expression
                    | binary_expression MOD binary_expression
                    | binary_expression PLUS binary_expression
                    | binary_expression MINUS binary_expression
                    | binary_expression RSHIFT binary_expression
                    | binary_expression LSHIFT binary_expression
                    | binary_expression LT binary_expression
                    | binary_expression LE binary_expression
                    | binary_expression GE binary_expression
                    | binary_expression GT binary_expression
                    | binary_expression EQ binary_expression
                    | binary_expression NE binary_expression
                    | binary_expression BAND binary_expression
                    | binary_expression BOR binary_expression
                    | binary_expression BXOR binary_expression
                    | binary_expression AND binary_expression
                    | binary_expression OR binary_expression

unary_expression : function_expression
unary_expression : primary_expression 
unary_expression : PLUSPLUS unary_expression 
                 | MINUSMINUS unary_expression
                 | unary_operator unary_expression

#&a, +a, -a, !a                 
unary_operator  :
                | PLUS
                | MINUS
                | NOT
                | BNOT

# test(1,2,3,4)  function call
function_expression  : identifier LPAREN argument_expression_list RPAREN
                     | identifier LPAREN RPAREN
                                                                        
primary_expression  : identifier
primary_expression  : constant
primary_expression  : STRING_LITERAL
primary_expression  : LPAREN expression RPAREN

argument_expression_list : assignment_expression 
                         | argument_expression_list COMMA assignment_expression
                            
identifier  : ID 
constant    : INT_CONST_DEC
            | INT_CONST_OCT
            | INT_CONST_HEX
constant    : FLOAT_CONST 
constant    : CHAR_CONST 
