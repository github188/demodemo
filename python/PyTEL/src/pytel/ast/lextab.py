# pytel.ast.lextab.py. This file automatically created by PLY (version 3.2). Don't edit!
_tabversion   = '3.2'
_lextokens    = {'DO': 1, 'DIVIDE': 1, 'CONST': 1, 'DEFAULT': 1, 'VOID': 1, 'NE': 1, 'LBRACKET': 1, 'WHILE': 1, 'COLON': 1, 'FLOAT_CONST': 1, 'LSHIFT': 1, 'RETURN': 1, 'MINUS': 1, 'COMMA': 1, 'STRING': 1, 'CASE': 1, 'LE': 1, 'RPAREN': 1, 'SEMI': 1, 'BXOR': 1, 'SWITCH': 1, 'PPHASH': 1, 'ENDSWITCH': 1, 'PLUS': 1, 'ENDFOR': 1, 'INTEGER': 1, 'BOR': 1, 'FUNCTION': 1, 'GT': 1, 'GOTO': 1, 'FOR': 1, 'PLUSPLUS': 1, 'INT_CONST_HEX': 1, 'EQUALS': 1, 'RBRACE': 1, 'ELSE': 1, 'BAND': 1, 'GE': 1, 'INT_CONST_DEC': 1, 'LPAREN': 1, 'ENDIF': 1, 'MINUSMINUS': 1, 'TIMES': 1, 'EQ': 1, 'ID': 1, 'IF': 1, 'AND': 1, 'ENDWHILE': 1, 'LBRACE': 1, 'STRING_LITERAL': 1, 'RSHIFT': 1, 'ENDFUNCTION': 1, 'FLOAT': 1, 'INT_CONST_OCT': 1, 'CHAR_CONST': 1, 'LT': 1, 'BREAK': 1, 'CONTINUE': 1, 'NOT': 1, 'RBRACKET': 1, 'BNOT': 1, 'OR': 1, 'MOD': 1}
_lexreflags   = 0
_lexliterals  = ''
_lexstateinfo = {'ppline': 'exclusive', 'INITIAL': 'inclusive'}
_lexstatere   = {'ppline': [('(?P<t_ppline_FILENAME>"([^"\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))*")|(?P<t_ppline_LINE_NUMBER>(0(([uU][lL])|([lL][uU])|[uU]|[lL])?)|([1-9][0-9]*(([uU][lL])|([lL][uU])|[uU]|[lL])?))|(?P<t_ppline_NEWLINE>\\n)|(?P<t_ppline_PPLINE>line)', [None, ('t_ppline_FILENAME', 'FILENAME'), None, None, None, None, None, None, ('t_ppline_LINE_NUMBER', 'LINE_NUMBER'), None, None, None, None, None, None, None, None, ('t_ppline_NEWLINE', 'NEWLINE'), ('t_ppline_PPLINE', 'PPLINE')])], 'INITIAL': [('(?P<t_PPHASH>[ \\t]*\\#)|(?P<t_NEWLINE>\\n+)|(?P<t_FLOAT_CONST>((((([0-9]*\\.[0-9]+)|([0-9]+\\.))([eE][-+]?[0-9]+)?)|([0-9]+([eE][-+]?[0-9]+)))[FfLl]?))|(?P<t_INT_CONST_HEX>0[xX][0-9a-fA-F]+(([uU][lL])|([lL][uU])|[uU]|[lL])?)|(?P<t_BAD_CONST_OCT>0[0-7]*[89])|(?P<t_INT_CONST_OCT>0[0-7]*(([uU][lL])|([lL][uU])|[uU]|[lL])?)|(?P<t_INT_CONST_DEC>(0(([uU][lL])|([lL][uU])|[uU]|[lL])?)|([1-9][0-9]*(([uU][lL])|([lL][uU])|[uU]|[lL])?))|(?P<t_CHAR_CONST>\'([^\'\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))\')|(?P<t_UNMATCHED_QUOTE>(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))*\\n)|(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))*$))|(?P<t_BAD_CHAR_CONST>(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))[^\'\n]+\')|(\'\')|(\'([\\\\][^a-zA-Z\\\\?\'"x0-7])[^\'\\n]*\'))|(?P<t_BAD_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))*([\\\\][^a-zA-Z\\\\?\'"x0-7])([^"\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))*")|(?P<t_ID>[a-zA-Z_][0-9a-zA-Z_]*)|(?P<t_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))*")|(?P<t_PLUSPLUS>\\+\\+)|(?P<t_PLUS>\\+)|(?P<t_LBRACE>\\{)|(?P<t_RBRACKET>\\])|(?P<t_BOR>\\|)|(?P<t_LSHIFT><<)|(?P<t_LE><=)|(?P<t_BXOR>\\^)', [None, ('t_PPHASH', 'PPHASH'), ('t_NEWLINE', 'NEWLINE'), ('t_FLOAT_CONST', 'FLOAT_CONST'), None, None, None, None, None, None, None, None, None, ('t_INT_CONST_HEX', 'INT_CONST_HEX'), None, None, None, ('t_BAD_CONST_OCT', 'BAD_CONST_OCT'), ('t_INT_CONST_OCT', 'INT_CONST_OCT'), None, None, None, ('t_INT_CONST_DEC', 'INT_CONST_DEC'), None, None, None, None, None, None, None, None, ('t_CHAR_CONST', 'CHAR_CONST'), None, None, None, None, None, None, ('t_UNMATCHED_QUOTE', 'UNMATCHED_QUOTE'), None, None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_BAD_CHAR_CONST', 'BAD_CHAR_CONST'), None, None, None, None, None, None, None, None, None, None, ('t_BAD_STRING_LITERAL', 'BAD_STRING_LITERAL'), None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_ID', 'ID'), (None, 'STRING_LITERAL'), None, None, None, None, None, None, (None, 'PLUSPLUS'), (None, 'PLUS'), (None, 'LBRACE'), (None, 'RBRACKET'), (None, 'BOR'), (None, 'LSHIFT'), (None, 'LE'), (None, 'BXOR')]), ('(?P<t_LPAREN>\\()|(?P<t_EQ>==)|(?P<t_RBRACE>\\})|(?P<t_NE><>)|(?P<t_MINUSMINUS>--)|(?P<t_TIMES>\\*)|(?P<t_LBRACKET>\\[)|(?P<t_GE>>=)|(?P<t_RPAREN>\\))|(?P<t_RSHIFT>>>)|(?P<t_BAND>&)|(?P<t_EQUALS>=)|(?P<t_LT><)|(?P<t_COMMA>,)|(?P<t_BNOT>~)|(?P<t_DIVIDE>/)|(?P<t_MOD>%)|(?P<t_SEMI>;)|(?P<t_MINUS>-)|(?P<t_GT>>)|(?P<t_COLON>:)', [None, (None, 'LPAREN'), (None, 'EQ'), (None, 'RBRACE'), (None, 'NE'), (None, 'MINUSMINUS'), (None, 'TIMES'), (None, 'LBRACKET'), (None, 'GE'), (None, 'RPAREN'), (None, 'RSHIFT'), (None, 'BAND'), (None, 'EQUALS'), (None, 'LT'), (None, 'COMMA'), (None, 'BNOT'), (None, 'DIVIDE'), (None, 'MOD'), (None, 'SEMI'), (None, 'MINUS'), (None, 'GT'), (None, 'COLON')])]}
_lexstateignore = {'ppline': ' \t', 'INITIAL': ' \t'}
_lexstateerrorf = {'ppline': 't_ppline_error', 'INITIAL': 't_error'}
