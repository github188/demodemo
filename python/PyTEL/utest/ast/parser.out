Created by PLY version 3.2 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     constant_expression_opt -> empty
Rule 2     constant_expression_opt -> constant_expression
Rule 3     expression_opt -> empty
Rule 4     expression_opt -> expression
Rule 5     parameter_list_opt -> empty
Rule 6     parameter_list_opt -> parameter_list
Rule 7     translation_unit -> external_decl_list
Rule 8     translation_unit -> translation_unit external_decl_list
Rule 9     external_decl_list -> external_decl
Rule 10    external_decl_list -> external_decl_list external_decl
Rule 11    external_decl -> external_declaration
Rule 12    external_decl -> declaration_specifiers
Rule 13    external_decl -> function_definition
Rule 14    external_declaration -> pp_directive
Rule 15    pp_directive -> PPHASH
Rule 16    function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION
Rule 17    statement -> labeled_statement
Rule 18    statement -> expression_statement
Rule 19    statement -> selection_statement
Rule 20    statement -> iteration_statement
Rule 21    statement -> jump_statement
Rule 22    declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI
Rule 23    declaration_specifiers -> type_specifier init_declarator_list SEMI
Rule 24    declaration_specifiers_list -> declaration_specifiers
Rule 25    declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers
Rule 26    function_type_specifier -> VOID
Rule 27    function_type_specifier -> type_specifier
Rule 28    type_specifier -> INTEGER
Rule 29    type_specifier -> FLOAT
Rule 30    type_specifier -> STRING
Rule 31    type_qualifier -> CONST
Rule 32    init_declarator_list -> init_declarator
Rule 33    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 34    init_declarator -> variable_declarator
Rule 35    init_declarator -> variable_declarator EQUALS initializer
Rule 36    variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET
Rule 37    variable_declarator -> identifier
Rule 38    parameter_list -> parameter_declaration
Rule 39    parameter_list -> parameter_list COMMA parameter_declaration
Rule 40    parameter_declaration -> type_specifier variable_declarator
Rule 41    parameter_declaration -> type_specifier BAND variable_declarator
Rule 42    initializer -> assignment_expression
Rule 43    initializer -> LBRACE initializer_list RBRACE
Rule 44    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 45    initializer_list -> initializer
Rule 46    initializer_list -> initializer_list COMMA initializer
Rule 47    compound_statement -> statement_list
Rule 48    compound_statement -> declaration_specifiers_list
Rule 49    compound_statement -> declaration_specifiers_list statement_list
Rule 50    statement_list -> statement
Rule 51    statement_list -> statement_list statement
Rule 52    labeled_statement -> ID COLON statement
Rule 53    labeled_statement -> CASE expression COLON statement
Rule 54    labeled_statement -> DEFAULT COLON statement
Rule 55    selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF
Rule 56    selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
Rule 57    selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
Rule 58    iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE
Rule 59    iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN
Rule 60    iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
Rule 61    jump_statement -> GOTO ID SEMI
Rule 62    jump_statement -> BREAK SEMI
Rule 63    jump_statement -> CONTINUE SEMI
Rule 64    jump_statement -> RETURN expression SEMI
Rule 65    jump_statement -> RETURN SEMI
Rule 66    expression_statement -> expression SEMI
Rule 67    expression_statement -> SEMI
Rule 68    expression -> assignment_expression
Rule 69    expression -> expression COMMA assignment_expression
Rule 70    assignment_expression -> conditional_expression
Rule 71    assignment_expression -> variable_declarator assignment_operator conditional_expression
Rule 72    assignment_operator -> EQUALS
Rule 73    constant_expression -> conditional_expression
Rule 74    conditional_expression -> binary_expression
Rule 75    binary_expression -> unary_expression
Rule 76    binary_expression -> binary_expression TIMES binary_expression
Rule 77    binary_expression -> binary_expression DIVIDE binary_expression
Rule 78    binary_expression -> binary_expression MOD binary_expression
Rule 79    binary_expression -> binary_expression PLUS binary_expression
Rule 80    binary_expression -> binary_expression MINUS binary_expression
Rule 81    binary_expression -> binary_expression RSHIFT binary_expression
Rule 82    binary_expression -> binary_expression LSHIFT binary_expression
Rule 83    binary_expression -> binary_expression LT binary_expression
Rule 84    binary_expression -> binary_expression LE binary_expression
Rule 85    binary_expression -> binary_expression GE binary_expression
Rule 86    binary_expression -> binary_expression GT binary_expression
Rule 87    binary_expression -> binary_expression EQ binary_expression
Rule 88    binary_expression -> binary_expression NE binary_expression
Rule 89    binary_expression -> binary_expression BAND binary_expression
Rule 90    binary_expression -> binary_expression BOR binary_expression
Rule 91    binary_expression -> binary_expression BXOR binary_expression
Rule 92    binary_expression -> binary_expression AND binary_expression
Rule 93    binary_expression -> binary_expression OR binary_expression
Rule 94    unary_expression -> function_expression
Rule 95    unary_expression -> primary_expression
Rule 96    unary_expression -> PLUSPLUS unary_expression
Rule 97    unary_expression -> MINUSMINUS unary_expression
Rule 98    unary_expression -> unary_operator unary_expression
Rule 99    unary_operator -> PLUS
Rule 100   unary_operator -> MINUS
Rule 101   unary_operator -> NOT
Rule 102   unary_operator -> BNOT
Rule 103   function_expression -> identifier LPAREN argument_expression_list RPAREN
Rule 104   function_expression -> identifier LPAREN RPAREN
Rule 105   primary_expression -> variable_declarator
Rule 106   primary_expression -> constant
Rule 107   primary_expression -> STRING_LITERAL
Rule 108   primary_expression -> LPAREN expression RPAREN
Rule 109   argument_expression_list -> assignment_expression
Rule 110   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 111   identifier -> ID
Rule 112   constant -> INT_CONST_DEC
Rule 113   constant -> INT_CONST_OCT
Rule 114   constant -> INT_CONST_HEX
Rule 115   constant -> FLOAT_CONST
Rule 116   constant -> CHAR_CONST
Rule 117   empty -> <empty>

Terminals, with rules where they appear

AND                  : 92
BAND                 : 41 89
BNOT                 : 102
BOR                  : 90
BREAK                : 62
BXOR                 : 91
CASE                 : 53
CHAR_CONST           : 116
COLON                : 52 53 54
COMMA                : 33 39 44 46 69 110
CONST                : 31
CONTINUE             : 63
DEFAULT              : 54
DIVIDE               : 77
DO                   : 59
ELSE                 : 56
ENDFOR               : 60
ENDFUNCTION          : 16
ENDIF                : 55 56
ENDSWITCH            : 57
ENDWHILE             : 58
EQ                   : 87
EQUALS               : 35 72
FLOAT                : 29
FLOAT_CONST          : 115
FOR                  : 60
FUNCTION             : 16
GE                   : 85
GOTO                 : 61
GT                   : 86
ID                   : 52 61 111
IF                   : 55 56
INTEGER              : 28
INT_CONST_DEC        : 112
INT_CONST_HEX        : 114
INT_CONST_OCT        : 113
LBRACE               : 43 44
LBRACKET             : 36
LE                   : 84
LPAREN               : 16 55 56 57 58 59 60 103 104 108
LSHIFT               : 82
LT                   : 83
MINUS                : 80 100
MINUSMINUS           : 97
MOD                  : 78
NE                   : 88
NOT                  : 101
OR                   : 93
PLUS                 : 79 99
PLUSPLUS             : 96
PPHASH               : 15
RBRACE               : 43 44
RBRACKET             : 36
RETURN               : 64 65
RPAREN               : 16 55 56 57 58 59 60 103 104 108
RSHIFT               : 81
SEMI                 : 22 23 60 60 61 62 63 64 65 66 67
STRING               : 30
STRING_LITERAL       : 107
SWITCH               : 57
TIMES                : 76
VOID                 : 26
WHILE                : 58 59
error                : 

Nonterminals, with rules where they appear

argument_expression_list : 103 110
assignment_expression : 42 68 69 109 110
assignment_operator  : 71
binary_expression    : 74 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93
compound_statement   : 16 55 56 56 57 58 59 60
conditional_expression : 70 71 73
constant             : 106
constant_expression  : 2
constant_expression_opt : 36
declaration_specifiers : 12 24 25
declaration_specifiers_list : 25 48 49
empty                : 1 3 5
expression           : 4 53 55 56 57 58 59 60 64 66 69 108
expression_opt       : 60 60
expression_statement : 18
external_decl        : 9 10
external_decl_list   : 7 8 10
external_declaration : 11
function_definition  : 13
function_expression  : 94
function_type_specifier : 16
identifier           : 16 36 37 103 104
init_declarator      : 32 33
init_declarator_list : 22 23 33
initializer          : 35 45 46
initializer_list     : 43 44 46
iteration_statement  : 20
jump_statement       : 21
labeled_statement    : 17
parameter_declaration : 38 39
parameter_list       : 6 39
parameter_list_opt   : 16
pp_directive         : 14
primary_expression   : 95
selection_statement  : 19
statement            : 50 51 52 53 54
statement_list       : 47 49 51
translation_unit     : 8 0
type_qualifier       : 22
type_specifier       : 22 23 27 40 41
unary_expression     : 75 96 97 98
unary_operator       : 98
variable_declarator  : 34 35 40 41 71 105

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (7) translation_unit -> . external_decl_list
    (8) translation_unit -> . translation_unit external_decl_list
    (9) external_decl_list -> . external_decl
    (10) external_decl_list -> . external_decl_list external_decl
    (11) external_decl -> . external_declaration
    (12) external_decl -> . declaration_specifiers
    (13) external_decl -> . function_definition
    (14) external_declaration -> . pp_directive
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (16) function_definition -> . function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION
    (15) pp_directive -> . PPHASH
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (26) function_type_specifier -> . VOID
    (27) function_type_specifier -> . type_specifier

    PPHASH          shift and go to state 14
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    VOID            shift and go to state 4

    external_declaration           shift and go to state 6
    function_type_specifier        shift and go to state 7
    function_definition            shift and go to state 13
    type_qualifier                 shift and go to state 15
    external_decl_list             shift and go to state 16
    external_decl                  shift and go to state 12
    type_specifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 3
    pp_directive                   shift and go to state 5
    translation_unit               shift and go to state 10

state 1

    (29) type_specifier -> FLOAT .

    ID              reduce using rule 29 (type_specifier -> FLOAT .)
    FUNCTION        reduce using rule 29 (type_specifier -> FLOAT .)
    BAND            reduce using rule 29 (type_specifier -> FLOAT .)


state 2

    (31) type_qualifier -> CONST .

    INTEGER         reduce using rule 31 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 31 (type_qualifier -> CONST .)
    STRING          reduce using rule 31 (type_qualifier -> CONST .)


state 3

    (12) external_decl -> declaration_specifiers .

    PPHASH          reduce using rule 12 (external_decl -> declaration_specifiers .)
    CONST           reduce using rule 12 (external_decl -> declaration_specifiers .)
    INTEGER         reduce using rule 12 (external_decl -> declaration_specifiers .)
    FLOAT           reduce using rule 12 (external_decl -> declaration_specifiers .)
    STRING          reduce using rule 12 (external_decl -> declaration_specifiers .)
    VOID            reduce using rule 12 (external_decl -> declaration_specifiers .)
    $end            reduce using rule 12 (external_decl -> declaration_specifiers .)


state 4

    (26) function_type_specifier -> VOID .

    FUNCTION        reduce using rule 26 (function_type_specifier -> VOID .)


state 5

    (14) external_declaration -> pp_directive .

    PPHASH          reduce using rule 14 (external_declaration -> pp_directive .)
    CONST           reduce using rule 14 (external_declaration -> pp_directive .)
    INTEGER         reduce using rule 14 (external_declaration -> pp_directive .)
    FLOAT           reduce using rule 14 (external_declaration -> pp_directive .)
    STRING          reduce using rule 14 (external_declaration -> pp_directive .)
    VOID            reduce using rule 14 (external_declaration -> pp_directive .)
    $end            reduce using rule 14 (external_declaration -> pp_directive .)


state 6

    (11) external_decl -> external_declaration .

    PPHASH          reduce using rule 11 (external_decl -> external_declaration .)
    CONST           reduce using rule 11 (external_decl -> external_declaration .)
    INTEGER         reduce using rule 11 (external_decl -> external_declaration .)
    FLOAT           reduce using rule 11 (external_decl -> external_declaration .)
    STRING          reduce using rule 11 (external_decl -> external_declaration .)
    VOID            reduce using rule 11 (external_decl -> external_declaration .)
    $end            reduce using rule 11 (external_decl -> external_declaration .)


state 7

    (16) function_definition -> function_type_specifier . FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION

    FUNCTION        shift and go to state 17


state 8

    (23) declaration_specifiers -> type_specifier . init_declarator_list SEMI
    (27) function_type_specifier -> type_specifier .
    (32) init_declarator_list -> . init_declarator
    (33) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (34) init_declarator -> . variable_declarator
    (35) init_declarator -> . variable_declarator EQUALS initializer
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (111) identifier -> . ID

    FUNCTION        reduce using rule 27 (function_type_specifier -> type_specifier .)
    ID              shift and go to state 22

    variable_declarator            shift and go to state 19
    init_declarator                shift and go to state 21
    init_declarator_list           shift and go to state 18
    identifier                     shift and go to state 20

state 9

    (28) type_specifier -> INTEGER .

    ID              reduce using rule 28 (type_specifier -> INTEGER .)
    FUNCTION        reduce using rule 28 (type_specifier -> INTEGER .)
    BAND            reduce using rule 28 (type_specifier -> INTEGER .)


state 10

    (0) S' -> translation_unit .
    (8) translation_unit -> translation_unit . external_decl_list
    (9) external_decl_list -> . external_decl
    (10) external_decl_list -> . external_decl_list external_decl
    (11) external_decl -> . external_declaration
    (12) external_decl -> . declaration_specifiers
    (13) external_decl -> . function_definition
    (14) external_declaration -> . pp_directive
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (16) function_definition -> . function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION
    (15) pp_directive -> . PPHASH
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (26) function_type_specifier -> . VOID
    (27) function_type_specifier -> . type_specifier

    PPHASH          shift and go to state 14
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    VOID            shift and go to state 4

    external_declaration           shift and go to state 6
    function_type_specifier        shift and go to state 7
    function_definition            shift and go to state 13
    type_qualifier                 shift and go to state 15
    external_decl_list             shift and go to state 23
    external_decl                  shift and go to state 12
    type_specifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 3
    pp_directive                   shift and go to state 5

state 11

    (30) type_specifier -> STRING .

    ID              reduce using rule 30 (type_specifier -> STRING .)
    FUNCTION        reduce using rule 30 (type_specifier -> STRING .)
    BAND            reduce using rule 30 (type_specifier -> STRING .)


state 12

    (9) external_decl_list -> external_decl .

    PPHASH          reduce using rule 9 (external_decl_list -> external_decl .)
    CONST           reduce using rule 9 (external_decl_list -> external_decl .)
    INTEGER         reduce using rule 9 (external_decl_list -> external_decl .)
    FLOAT           reduce using rule 9 (external_decl_list -> external_decl .)
    STRING          reduce using rule 9 (external_decl_list -> external_decl .)
    VOID            reduce using rule 9 (external_decl_list -> external_decl .)
    $end            reduce using rule 9 (external_decl_list -> external_decl .)


state 13

    (13) external_decl -> function_definition .

    PPHASH          reduce using rule 13 (external_decl -> function_definition .)
    CONST           reduce using rule 13 (external_decl -> function_definition .)
    INTEGER         reduce using rule 13 (external_decl -> function_definition .)
    FLOAT           reduce using rule 13 (external_decl -> function_definition .)
    STRING          reduce using rule 13 (external_decl -> function_definition .)
    VOID            reduce using rule 13 (external_decl -> function_definition .)
    $end            reduce using rule 13 (external_decl -> function_definition .)


state 14

    (15) pp_directive -> PPHASH .

    PPHASH          reduce using rule 15 (pp_directive -> PPHASH .)
    CONST           reduce using rule 15 (pp_directive -> PPHASH .)
    INTEGER         reduce using rule 15 (pp_directive -> PPHASH .)
    FLOAT           reduce using rule 15 (pp_directive -> PPHASH .)
    STRING          reduce using rule 15 (pp_directive -> PPHASH .)
    VOID            reduce using rule 15 (pp_directive -> PPHASH .)
    $end            reduce using rule 15 (pp_directive -> PPHASH .)


state 15

    (22) declaration_specifiers -> type_qualifier . type_specifier init_declarator_list SEMI
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING

    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11

    type_specifier                 shift and go to state 24

state 16

    (7) translation_unit -> external_decl_list .
    (10) external_decl_list -> external_decl_list . external_decl
    (11) external_decl -> . external_declaration
    (12) external_decl -> . declaration_specifiers
    (13) external_decl -> . function_definition
    (14) external_declaration -> . pp_directive
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (16) function_definition -> . function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION
    (15) pp_directive -> . PPHASH
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (26) function_type_specifier -> . VOID
    (27) function_type_specifier -> . type_specifier

  ! shift/reduce conflict for PPHASH resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    $end            reduce using rule 7 (translation_unit -> external_decl_list .)
    PPHASH          shift and go to state 14
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    VOID            shift and go to state 4

  ! PPHASH          [ reduce using rule 7 (translation_unit -> external_decl_list .) ]
  ! CONST           [ reduce using rule 7 (translation_unit -> external_decl_list .) ]
  ! INTEGER         [ reduce using rule 7 (translation_unit -> external_decl_list .) ]
  ! FLOAT           [ reduce using rule 7 (translation_unit -> external_decl_list .) ]
  ! STRING          [ reduce using rule 7 (translation_unit -> external_decl_list .) ]
  ! VOID            [ reduce using rule 7 (translation_unit -> external_decl_list .) ]

    external_declaration           shift and go to state 6
    function_type_specifier        shift and go to state 7
    function_definition            shift and go to state 13
    type_qualifier                 shift and go to state 15
    external_decl                  shift and go to state 25
    type_specifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 3
    pp_directive                   shift and go to state 5

state 17

    (16) function_definition -> function_type_specifier FUNCTION . identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION
    (111) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 26

state 18

    (23) declaration_specifiers -> type_specifier init_declarator_list . SEMI
    (33) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 28
    COMMA           shift and go to state 27


state 19

    (34) init_declarator -> variable_declarator .
    (35) init_declarator -> variable_declarator . EQUALS initializer

    SEMI            reduce using rule 34 (init_declarator -> variable_declarator .)
    COMMA           reduce using rule 34 (init_declarator -> variable_declarator .)
    EQUALS          shift and go to state 29


state 20

    (36) variable_declarator -> identifier . LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> identifier .

    LBRACKET        shift and go to state 30
    EQUALS          reduce using rule 37 (variable_declarator -> identifier .)
    SEMI            reduce using rule 37 (variable_declarator -> identifier .)
    COMMA           reduce using rule 37 (variable_declarator -> identifier .)
    RPAREN          reduce using rule 37 (variable_declarator -> identifier .)


state 21

    (32) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 32 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 32 (init_declarator_list -> init_declarator .)


state 22

    (111) identifier -> ID .

    LBRACKET        reduce using rule 111 (identifier -> ID .)
    COMMA           reduce using rule 111 (identifier -> ID .)
    RPAREN          reduce using rule 111 (identifier -> ID .)
    LPAREN          reduce using rule 111 (identifier -> ID .)
    TIMES           reduce using rule 111 (identifier -> ID .)
    DIVIDE          reduce using rule 111 (identifier -> ID .)
    MOD             reduce using rule 111 (identifier -> ID .)
    PLUS            reduce using rule 111 (identifier -> ID .)
    MINUS           reduce using rule 111 (identifier -> ID .)
    RSHIFT          reduce using rule 111 (identifier -> ID .)
    LSHIFT          reduce using rule 111 (identifier -> ID .)
    LT              reduce using rule 111 (identifier -> ID .)
    LE              reduce using rule 111 (identifier -> ID .)
    GE              reduce using rule 111 (identifier -> ID .)
    GT              reduce using rule 111 (identifier -> ID .)
    EQ              reduce using rule 111 (identifier -> ID .)
    NE              reduce using rule 111 (identifier -> ID .)
    BAND            reduce using rule 111 (identifier -> ID .)
    BOR             reduce using rule 111 (identifier -> ID .)
    BXOR            reduce using rule 111 (identifier -> ID .)
    AND             reduce using rule 111 (identifier -> ID .)
    OR              reduce using rule 111 (identifier -> ID .)
    SEMI            reduce using rule 111 (identifier -> ID .)
    RBRACKET        reduce using rule 111 (identifier -> ID .)
    RBRACE          reduce using rule 111 (identifier -> ID .)
    COLON           reduce using rule 111 (identifier -> ID .)
    EQUALS          reduce using rule 111 (identifier -> ID .)


state 23

    (8) translation_unit -> translation_unit external_decl_list .
    (10) external_decl_list -> external_decl_list . external_decl
    (11) external_decl -> . external_declaration
    (12) external_decl -> . declaration_specifiers
    (13) external_decl -> . function_definition
    (14) external_declaration -> . pp_directive
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (16) function_definition -> . function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION
    (15) pp_directive -> . PPHASH
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (26) function_type_specifier -> . VOID
    (27) function_type_specifier -> . type_specifier

  ! shift/reduce conflict for PPHASH resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    $end            reduce using rule 8 (translation_unit -> translation_unit external_decl_list .)
    PPHASH          shift and go to state 14
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    VOID            shift and go to state 4

  ! PPHASH          [ reduce using rule 8 (translation_unit -> translation_unit external_decl_list .) ]
  ! CONST           [ reduce using rule 8 (translation_unit -> translation_unit external_decl_list .) ]
  ! INTEGER         [ reduce using rule 8 (translation_unit -> translation_unit external_decl_list .) ]
  ! FLOAT           [ reduce using rule 8 (translation_unit -> translation_unit external_decl_list .) ]
  ! STRING          [ reduce using rule 8 (translation_unit -> translation_unit external_decl_list .) ]
  ! VOID            [ reduce using rule 8 (translation_unit -> translation_unit external_decl_list .) ]

    external_declaration           shift and go to state 6
    function_type_specifier        shift and go to state 7
    function_definition            shift and go to state 13
    type_qualifier                 shift and go to state 15
    external_decl                  shift and go to state 25
    type_specifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 3
    pp_directive                   shift and go to state 5

state 24

    (22) declaration_specifiers -> type_qualifier type_specifier . init_declarator_list SEMI
    (32) init_declarator_list -> . init_declarator
    (33) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (34) init_declarator -> . variable_declarator
    (35) init_declarator -> . variable_declarator EQUALS initializer
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (111) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 20
    variable_declarator            shift and go to state 19
    init_declarator                shift and go to state 21
    init_declarator_list           shift and go to state 31

state 25

    (10) external_decl_list -> external_decl_list external_decl .

    PPHASH          reduce using rule 10 (external_decl_list -> external_decl_list external_decl .)
    CONST           reduce using rule 10 (external_decl_list -> external_decl_list external_decl .)
    INTEGER         reduce using rule 10 (external_decl_list -> external_decl_list external_decl .)
    FLOAT           reduce using rule 10 (external_decl_list -> external_decl_list external_decl .)
    STRING          reduce using rule 10 (external_decl_list -> external_decl_list external_decl .)
    VOID            reduce using rule 10 (external_decl_list -> external_decl_list external_decl .)
    $end            reduce using rule 10 (external_decl_list -> external_decl_list external_decl .)


state 26

    (16) function_definition -> function_type_specifier FUNCTION identifier . LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION

    LPAREN          shift and go to state 32


state 27

    (33) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (34) init_declarator -> . variable_declarator
    (35) init_declarator -> . variable_declarator EQUALS initializer
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (111) identifier -> . ID

    ID              shift and go to state 22

    variable_declarator            shift and go to state 19
    init_declarator                shift and go to state 33
    identifier                     shift and go to state 20

state 28

    (23) declaration_specifiers -> type_specifier init_declarator_list SEMI .

    CONST           reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    INTEGER         reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    FLOAT           reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    STRING          reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    ID              reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    CASE            reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    DEFAULT         reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    SEMI            reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    IF              reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    SWITCH          reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    WHILE           reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    DO              reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    FOR             reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    GOTO            reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    BREAK           reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    CONTINUE        reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    RETURN          reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    STRING_LITERAL  reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    LPAREN          reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    PLUS            reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    MINUS           reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    NOT             reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    BNOT            reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    INT_CONST_DEC   reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    INT_CONST_OCT   reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    INT_CONST_HEX   reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    FLOAT_CONST     reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    CHAR_CONST      reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    ENDFOR          reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    ENDIF           reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    PPHASH          reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    VOID            reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    $end            reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    ENDFUNCTION     reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    ENDWHILE        reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    ENDSWITCH       reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)
    ELSE            reduce using rule 23 (declaration_specifiers -> type_specifier init_declarator_list SEMI .)


state 29

    (35) init_declarator -> variable_declarator EQUALS . initializer
    (42) initializer -> . assignment_expression
    (43) initializer -> . LBRACE initializer_list RBRACE
    (44) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    LBRACE          shift and go to state 53
    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 41
    unary_expression               shift and go to state 34
    conditional_expression         shift and go to state 56
    initializer                    shift and go to state 36
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 30

    (36) variable_declarator -> identifier LBRACKET . constant_expression_opt RBRACKET
    (1) constant_expression_opt -> . empty
    (2) constant_expression_opt -> . constant_expression
    (117) empty -> .
    (73) constant_expression -> . conditional_expression
    (74) conditional_expression -> . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    RBRACKET        reduce using rule 117 (empty -> .)
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 54
    unary_expression               shift and go to state 34
    constant_expression_opt        shift and go to state 61
    variable_declarator            shift and go to state 59
    empty                          shift and go to state 60
    unary_operator                 shift and go to state 45
    conditional_expression         shift and go to state 63
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    constant_expression            shift and go to state 62
    primary_expression             shift and go to state 49

state 31

    (22) declaration_specifiers -> type_qualifier type_specifier init_declarator_list . SEMI
    (33) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 65
    COMMA           shift and go to state 27


state 32

    (16) function_definition -> function_type_specifier FUNCTION identifier LPAREN . parameter_list_opt RPAREN compound_statement ENDFUNCTION
    (5) parameter_list_opt -> . empty
    (6) parameter_list_opt -> . parameter_list
    (117) empty -> .
    (38) parameter_list -> . parameter_declaration
    (39) parameter_list -> . parameter_list COMMA parameter_declaration
    (40) parameter_declaration -> . type_specifier variable_declarator
    (41) parameter_declaration -> . type_specifier BAND variable_declarator
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING

    RPAREN          reduce using rule 117 (empty -> .)
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11

    type_specifier                 shift and go to state 66
    parameter_list                 shift and go to state 67
    parameter_declaration          shift and go to state 68
    parameter_list_opt             shift and go to state 69
    empty                          shift and go to state 70

state 33

    (33) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 33 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 33 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 34

    (75) binary_expression -> unary_expression .

    TIMES           reduce using rule 75 (binary_expression -> unary_expression .)
    DIVIDE          reduce using rule 75 (binary_expression -> unary_expression .)
    MOD             reduce using rule 75 (binary_expression -> unary_expression .)
    PLUS            reduce using rule 75 (binary_expression -> unary_expression .)
    MINUS           reduce using rule 75 (binary_expression -> unary_expression .)
    RSHIFT          reduce using rule 75 (binary_expression -> unary_expression .)
    LSHIFT          reduce using rule 75 (binary_expression -> unary_expression .)
    LT              reduce using rule 75 (binary_expression -> unary_expression .)
    LE              reduce using rule 75 (binary_expression -> unary_expression .)
    GE              reduce using rule 75 (binary_expression -> unary_expression .)
    GT              reduce using rule 75 (binary_expression -> unary_expression .)
    EQ              reduce using rule 75 (binary_expression -> unary_expression .)
    NE              reduce using rule 75 (binary_expression -> unary_expression .)
    BAND            reduce using rule 75 (binary_expression -> unary_expression .)
    BOR             reduce using rule 75 (binary_expression -> unary_expression .)
    BXOR            reduce using rule 75 (binary_expression -> unary_expression .)
    AND             reduce using rule 75 (binary_expression -> unary_expression .)
    OR              reduce using rule 75 (binary_expression -> unary_expression .)
    SEMI            reduce using rule 75 (binary_expression -> unary_expression .)
    COMMA           reduce using rule 75 (binary_expression -> unary_expression .)
    RBRACKET        reduce using rule 75 (binary_expression -> unary_expression .)
    RPAREN          reduce using rule 75 (binary_expression -> unary_expression .)
    RBRACE          reduce using rule 75 (binary_expression -> unary_expression .)
    COLON           reduce using rule 75 (binary_expression -> unary_expression .)


state 35

    (101) unary_operator -> NOT .

    PLUSPLUS        reduce using rule 101 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 101 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 101 (unary_operator -> NOT .)
    LPAREN          reduce using rule 101 (unary_operator -> NOT .)
    PLUS            reduce using rule 101 (unary_operator -> NOT .)
    MINUS           reduce using rule 101 (unary_operator -> NOT .)
    NOT             reduce using rule 101 (unary_operator -> NOT .)
    BNOT            reduce using rule 101 (unary_operator -> NOT .)
    ID              reduce using rule 101 (unary_operator -> NOT .)
    INT_CONST_DEC   reduce using rule 101 (unary_operator -> NOT .)
    INT_CONST_OCT   reduce using rule 101 (unary_operator -> NOT .)
    INT_CONST_HEX   reduce using rule 101 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 101 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 101 (unary_operator -> NOT .)


state 36

    (35) init_declarator -> variable_declarator EQUALS initializer .

    SEMI            reduce using rule 35 (init_declarator -> variable_declarator EQUALS initializer .)
    COMMA           reduce using rule 35 (init_declarator -> variable_declarator EQUALS initializer .)


state 37

    (116) constant -> CHAR_CONST .

    TIMES           reduce using rule 116 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 116 (constant -> CHAR_CONST .)
    MOD             reduce using rule 116 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 116 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 116 (constant -> CHAR_CONST .)
    RSHIFT          reduce using rule 116 (constant -> CHAR_CONST .)
    LSHIFT          reduce using rule 116 (constant -> CHAR_CONST .)
    LT              reduce using rule 116 (constant -> CHAR_CONST .)
    LE              reduce using rule 116 (constant -> CHAR_CONST .)
    GE              reduce using rule 116 (constant -> CHAR_CONST .)
    GT              reduce using rule 116 (constant -> CHAR_CONST .)
    EQ              reduce using rule 116 (constant -> CHAR_CONST .)
    NE              reduce using rule 116 (constant -> CHAR_CONST .)
    BAND            reduce using rule 116 (constant -> CHAR_CONST .)
    BOR             reduce using rule 116 (constant -> CHAR_CONST .)
    BXOR            reduce using rule 116 (constant -> CHAR_CONST .)
    AND             reduce using rule 116 (constant -> CHAR_CONST .)
    OR              reduce using rule 116 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 116 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 116 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 116 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 116 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 116 (constant -> CHAR_CONST .)
    COLON           reduce using rule 116 (constant -> CHAR_CONST .)


state 38

    (102) unary_operator -> BNOT .

    PLUSPLUS        reduce using rule 102 (unary_operator -> BNOT .)
    MINUSMINUS      reduce using rule 102 (unary_operator -> BNOT .)
    STRING_LITERAL  reduce using rule 102 (unary_operator -> BNOT .)
    LPAREN          reduce using rule 102 (unary_operator -> BNOT .)
    PLUS            reduce using rule 102 (unary_operator -> BNOT .)
    MINUS           reduce using rule 102 (unary_operator -> BNOT .)
    NOT             reduce using rule 102 (unary_operator -> BNOT .)
    BNOT            reduce using rule 102 (unary_operator -> BNOT .)
    ID              reduce using rule 102 (unary_operator -> BNOT .)
    INT_CONST_DEC   reduce using rule 102 (unary_operator -> BNOT .)
    INT_CONST_OCT   reduce using rule 102 (unary_operator -> BNOT .)
    INT_CONST_HEX   reduce using rule 102 (unary_operator -> BNOT .)
    FLOAT_CONST     reduce using rule 102 (unary_operator -> BNOT .)
    CHAR_CONST      reduce using rule 102 (unary_operator -> BNOT .)


state 39

    (106) primary_expression -> constant .

    TIMES           reduce using rule 106 (primary_expression -> constant .)
    DIVIDE          reduce using rule 106 (primary_expression -> constant .)
    MOD             reduce using rule 106 (primary_expression -> constant .)
    PLUS            reduce using rule 106 (primary_expression -> constant .)
    MINUS           reduce using rule 106 (primary_expression -> constant .)
    RSHIFT          reduce using rule 106 (primary_expression -> constant .)
    LSHIFT          reduce using rule 106 (primary_expression -> constant .)
    LT              reduce using rule 106 (primary_expression -> constant .)
    LE              reduce using rule 106 (primary_expression -> constant .)
    GE              reduce using rule 106 (primary_expression -> constant .)
    GT              reduce using rule 106 (primary_expression -> constant .)
    EQ              reduce using rule 106 (primary_expression -> constant .)
    NE              reduce using rule 106 (primary_expression -> constant .)
    BAND            reduce using rule 106 (primary_expression -> constant .)
    BOR             reduce using rule 106 (primary_expression -> constant .)
    BXOR            reduce using rule 106 (primary_expression -> constant .)
    AND             reduce using rule 106 (primary_expression -> constant .)
    OR              reduce using rule 106 (primary_expression -> constant .)
    SEMI            reduce using rule 106 (primary_expression -> constant .)
    COMMA           reduce using rule 106 (primary_expression -> constant .)
    COLON           reduce using rule 106 (primary_expression -> constant .)
    RBRACE          reduce using rule 106 (primary_expression -> constant .)
    RBRACKET        reduce using rule 106 (primary_expression -> constant .)
    RPAREN          reduce using rule 106 (primary_expression -> constant .)


state 40

    (100) unary_operator -> MINUS .

    PLUSPLUS        reduce using rule 100 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 100 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 100 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 100 (unary_operator -> MINUS .)
    PLUS            reduce using rule 100 (unary_operator -> MINUS .)
    MINUS           reduce using rule 100 (unary_operator -> MINUS .)
    NOT             reduce using rule 100 (unary_operator -> MINUS .)
    BNOT            reduce using rule 100 (unary_operator -> MINUS .)
    ID              reduce using rule 100 (unary_operator -> MINUS .)
    INT_CONST_DEC   reduce using rule 100 (unary_operator -> MINUS .)
    INT_CONST_OCT   reduce using rule 100 (unary_operator -> MINUS .)
    INT_CONST_HEX   reduce using rule 100 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 100 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 100 (unary_operator -> MINUS .)


state 41

    (42) initializer -> assignment_expression .

    RBRACE          reduce using rule 42 (initializer -> assignment_expression .)
    COMMA           reduce using rule 42 (initializer -> assignment_expression .)
    SEMI            reduce using rule 42 (initializer -> assignment_expression .)


state 42

    (115) constant -> FLOAT_CONST .

    TIMES           reduce using rule 115 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 115 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 115 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 115 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 115 (constant -> FLOAT_CONST .)
    RSHIFT          reduce using rule 115 (constant -> FLOAT_CONST .)
    LSHIFT          reduce using rule 115 (constant -> FLOAT_CONST .)
    LT              reduce using rule 115 (constant -> FLOAT_CONST .)
    LE              reduce using rule 115 (constant -> FLOAT_CONST .)
    GE              reduce using rule 115 (constant -> FLOAT_CONST .)
    GT              reduce using rule 115 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 115 (constant -> FLOAT_CONST .)
    NE              reduce using rule 115 (constant -> FLOAT_CONST .)
    BAND            reduce using rule 115 (constant -> FLOAT_CONST .)
    BOR             reduce using rule 115 (constant -> FLOAT_CONST .)
    BXOR            reduce using rule 115 (constant -> FLOAT_CONST .)
    AND             reduce using rule 115 (constant -> FLOAT_CONST .)
    OR              reduce using rule 115 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 115 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 115 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 115 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 115 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 115 (constant -> FLOAT_CONST .)
    COLON           reduce using rule 115 (constant -> FLOAT_CONST .)


state 43

    (71) assignment_expression -> variable_declarator . assignment_operator conditional_expression
    (105) primary_expression -> variable_declarator .
    (72) assignment_operator -> . EQUALS

    TIMES           reduce using rule 105 (primary_expression -> variable_declarator .)
    DIVIDE          reduce using rule 105 (primary_expression -> variable_declarator .)
    MOD             reduce using rule 105 (primary_expression -> variable_declarator .)
    PLUS            reduce using rule 105 (primary_expression -> variable_declarator .)
    MINUS           reduce using rule 105 (primary_expression -> variable_declarator .)
    RSHIFT          reduce using rule 105 (primary_expression -> variable_declarator .)
    LSHIFT          reduce using rule 105 (primary_expression -> variable_declarator .)
    LT              reduce using rule 105 (primary_expression -> variable_declarator .)
    LE              reduce using rule 105 (primary_expression -> variable_declarator .)
    GE              reduce using rule 105 (primary_expression -> variable_declarator .)
    GT              reduce using rule 105 (primary_expression -> variable_declarator .)
    EQ              reduce using rule 105 (primary_expression -> variable_declarator .)
    NE              reduce using rule 105 (primary_expression -> variable_declarator .)
    BAND            reduce using rule 105 (primary_expression -> variable_declarator .)
    BOR             reduce using rule 105 (primary_expression -> variable_declarator .)
    BXOR            reduce using rule 105 (primary_expression -> variable_declarator .)
    AND             reduce using rule 105 (primary_expression -> variable_declarator .)
    OR              reduce using rule 105 (primary_expression -> variable_declarator .)
    SEMI            reduce using rule 105 (primary_expression -> variable_declarator .)
    COMMA           reduce using rule 105 (primary_expression -> variable_declarator .)
    COLON           reduce using rule 105 (primary_expression -> variable_declarator .)
    RBRACE          reduce using rule 105 (primary_expression -> variable_declarator .)
    RPAREN          reduce using rule 105 (primary_expression -> variable_declarator .)
    EQUALS          shift and go to state 71

    assignment_operator            shift and go to state 72

state 44

    (99) unary_operator -> PLUS .

    PLUSPLUS        reduce using rule 99 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 99 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 99 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 99 (unary_operator -> PLUS .)
    PLUS            reduce using rule 99 (unary_operator -> PLUS .)
    MINUS           reduce using rule 99 (unary_operator -> PLUS .)
    NOT             reduce using rule 99 (unary_operator -> PLUS .)
    BNOT            reduce using rule 99 (unary_operator -> PLUS .)
    ID              reduce using rule 99 (unary_operator -> PLUS .)
    INT_CONST_DEC   reduce using rule 99 (unary_operator -> PLUS .)
    INT_CONST_OCT   reduce using rule 99 (unary_operator -> PLUS .)
    INT_CONST_HEX   reduce using rule 99 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 99 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 99 (unary_operator -> PLUS .)


state 45

    (98) unary_expression -> unary_operator . unary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    unary_expression               shift and go to state 73
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 46

    (96) unary_expression -> PLUSPLUS . unary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    unary_expression               shift and go to state 74
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 47

    (114) constant -> INT_CONST_HEX .

    TIMES           reduce using rule 114 (constant -> INT_CONST_HEX .)
    DIVIDE          reduce using rule 114 (constant -> INT_CONST_HEX .)
    MOD             reduce using rule 114 (constant -> INT_CONST_HEX .)
    PLUS            reduce using rule 114 (constant -> INT_CONST_HEX .)
    MINUS           reduce using rule 114 (constant -> INT_CONST_HEX .)
    RSHIFT          reduce using rule 114 (constant -> INT_CONST_HEX .)
    LSHIFT          reduce using rule 114 (constant -> INT_CONST_HEX .)
    LT              reduce using rule 114 (constant -> INT_CONST_HEX .)
    LE              reduce using rule 114 (constant -> INT_CONST_HEX .)
    GE              reduce using rule 114 (constant -> INT_CONST_HEX .)
    GT              reduce using rule 114 (constant -> INT_CONST_HEX .)
    EQ              reduce using rule 114 (constant -> INT_CONST_HEX .)
    NE              reduce using rule 114 (constant -> INT_CONST_HEX .)
    BAND            reduce using rule 114 (constant -> INT_CONST_HEX .)
    BOR             reduce using rule 114 (constant -> INT_CONST_HEX .)
    BXOR            reduce using rule 114 (constant -> INT_CONST_HEX .)
    AND             reduce using rule 114 (constant -> INT_CONST_HEX .)
    OR              reduce using rule 114 (constant -> INT_CONST_HEX .)
    RPAREN          reduce using rule 114 (constant -> INT_CONST_HEX .)
    COMMA           reduce using rule 114 (constant -> INT_CONST_HEX .)
    SEMI            reduce using rule 114 (constant -> INT_CONST_HEX .)
    RBRACKET        reduce using rule 114 (constant -> INT_CONST_HEX .)
    RBRACE          reduce using rule 114 (constant -> INT_CONST_HEX .)
    COLON           reduce using rule 114 (constant -> INT_CONST_HEX .)


state 48

    (112) constant -> INT_CONST_DEC .

    TIMES           reduce using rule 112 (constant -> INT_CONST_DEC .)
    DIVIDE          reduce using rule 112 (constant -> INT_CONST_DEC .)
    MOD             reduce using rule 112 (constant -> INT_CONST_DEC .)
    PLUS            reduce using rule 112 (constant -> INT_CONST_DEC .)
    MINUS           reduce using rule 112 (constant -> INT_CONST_DEC .)
    RSHIFT          reduce using rule 112 (constant -> INT_CONST_DEC .)
    LSHIFT          reduce using rule 112 (constant -> INT_CONST_DEC .)
    LT              reduce using rule 112 (constant -> INT_CONST_DEC .)
    LE              reduce using rule 112 (constant -> INT_CONST_DEC .)
    GE              reduce using rule 112 (constant -> INT_CONST_DEC .)
    GT              reduce using rule 112 (constant -> INT_CONST_DEC .)
    EQ              reduce using rule 112 (constant -> INT_CONST_DEC .)
    NE              reduce using rule 112 (constant -> INT_CONST_DEC .)
    BAND            reduce using rule 112 (constant -> INT_CONST_DEC .)
    BOR             reduce using rule 112 (constant -> INT_CONST_DEC .)
    BXOR            reduce using rule 112 (constant -> INT_CONST_DEC .)
    AND             reduce using rule 112 (constant -> INT_CONST_DEC .)
    OR              reduce using rule 112 (constant -> INT_CONST_DEC .)
    RPAREN          reduce using rule 112 (constant -> INT_CONST_DEC .)
    COMMA           reduce using rule 112 (constant -> INT_CONST_DEC .)
    SEMI            reduce using rule 112 (constant -> INT_CONST_DEC .)
    RBRACKET        reduce using rule 112 (constant -> INT_CONST_DEC .)
    RBRACE          reduce using rule 112 (constant -> INT_CONST_DEC .)
    COLON           reduce using rule 112 (constant -> INT_CONST_DEC .)


state 49

    (95) unary_expression -> primary_expression .

    TIMES           reduce using rule 95 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 95 (unary_expression -> primary_expression .)
    MOD             reduce using rule 95 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 95 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 95 (unary_expression -> primary_expression .)
    RSHIFT          reduce using rule 95 (unary_expression -> primary_expression .)
    LSHIFT          reduce using rule 95 (unary_expression -> primary_expression .)
    LT              reduce using rule 95 (unary_expression -> primary_expression .)
    LE              reduce using rule 95 (unary_expression -> primary_expression .)
    GE              reduce using rule 95 (unary_expression -> primary_expression .)
    GT              reduce using rule 95 (unary_expression -> primary_expression .)
    EQ              reduce using rule 95 (unary_expression -> primary_expression .)
    NE              reduce using rule 95 (unary_expression -> primary_expression .)
    BAND            reduce using rule 95 (unary_expression -> primary_expression .)
    BOR             reduce using rule 95 (unary_expression -> primary_expression .)
    BXOR            reduce using rule 95 (unary_expression -> primary_expression .)
    AND             reduce using rule 95 (unary_expression -> primary_expression .)
    OR              reduce using rule 95 (unary_expression -> primary_expression .)
    RBRACE          reduce using rule 95 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 95 (unary_expression -> primary_expression .)
    SEMI            reduce using rule 95 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 95 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 95 (unary_expression -> primary_expression .)
    COLON           reduce using rule 95 (unary_expression -> primary_expression .)


state 50

    (108) primary_expression -> LPAREN . expression RPAREN
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 76
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 51

    (97) unary_expression -> MINUSMINUS . unary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    unary_expression               shift and go to state 77
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 52

    (107) primary_expression -> STRING_LITERAL .

    TIMES           reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    RSHIFT          reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    LSHIFT          reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    LT              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    LE              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    GE              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    GT              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    EQ              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    NE              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    BAND            reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    BOR             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    BXOR            reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    SEMI            reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    COLON           reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 107 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 107 (primary_expression -> STRING_LITERAL .)


state 53

    (43) initializer -> LBRACE . initializer_list RBRACE
    (44) initializer -> LBRACE . initializer_list COMMA RBRACE
    (45) initializer_list -> . initializer
    (46) initializer_list -> . initializer_list COMMA initializer
    (42) initializer -> . assignment_expression
    (43) initializer -> . LBRACE initializer_list RBRACE
    (44) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    LBRACE          shift and go to state 53
    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 41
    unary_expression               shift and go to state 34
    initializer_list               shift and go to state 79
    initializer                    shift and go to state 78
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 54

    (74) conditional_expression -> binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 74 (conditional_expression -> binary_expression .)
    COMMA           reduce using rule 74 (conditional_expression -> binary_expression .)
    SEMI            reduce using rule 74 (conditional_expression -> binary_expression .)
    RPAREN          reduce using rule 74 (conditional_expression -> binary_expression .)
    COLON           reduce using rule 74 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 74 (conditional_expression -> binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    LT              shift and go to state 90
    LE              shift and go to state 82
    GE              shift and go to state 87
    GT              shift and go to state 91
    EQ              shift and go to state 94
    NE              shift and go to state 96
    BAND            shift and go to state 89
    BOR             shift and go to state 86
    BXOR            shift and go to state 85
    AND             shift and go to state 80
    OR              shift and go to state 81


state 55

    (113) constant -> INT_CONST_OCT .

    TIMES           reduce using rule 113 (constant -> INT_CONST_OCT .)
    DIVIDE          reduce using rule 113 (constant -> INT_CONST_OCT .)
    MOD             reduce using rule 113 (constant -> INT_CONST_OCT .)
    PLUS            reduce using rule 113 (constant -> INT_CONST_OCT .)
    MINUS           reduce using rule 113 (constant -> INT_CONST_OCT .)
    RSHIFT          reduce using rule 113 (constant -> INT_CONST_OCT .)
    LSHIFT          reduce using rule 113 (constant -> INT_CONST_OCT .)
    LT              reduce using rule 113 (constant -> INT_CONST_OCT .)
    LE              reduce using rule 113 (constant -> INT_CONST_OCT .)
    GE              reduce using rule 113 (constant -> INT_CONST_OCT .)
    GT              reduce using rule 113 (constant -> INT_CONST_OCT .)
    EQ              reduce using rule 113 (constant -> INT_CONST_OCT .)
    NE              reduce using rule 113 (constant -> INT_CONST_OCT .)
    BAND            reduce using rule 113 (constant -> INT_CONST_OCT .)
    BOR             reduce using rule 113 (constant -> INT_CONST_OCT .)
    BXOR            reduce using rule 113 (constant -> INT_CONST_OCT .)
    AND             reduce using rule 113 (constant -> INT_CONST_OCT .)
    OR              reduce using rule 113 (constant -> INT_CONST_OCT .)
    RPAREN          reduce using rule 113 (constant -> INT_CONST_OCT .)
    COMMA           reduce using rule 113 (constant -> INT_CONST_OCT .)
    SEMI            reduce using rule 113 (constant -> INT_CONST_OCT .)
    RBRACKET        reduce using rule 113 (constant -> INT_CONST_OCT .)
    RBRACE          reduce using rule 113 (constant -> INT_CONST_OCT .)
    COLON           reduce using rule 113 (constant -> INT_CONST_OCT .)


state 56

    (70) assignment_expression -> conditional_expression .

    COLON           reduce using rule 70 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 70 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 70 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 70 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 70 (assignment_expression -> conditional_expression .)


state 57

    (94) unary_expression -> function_expression .

    TIMES           reduce using rule 94 (unary_expression -> function_expression .)
    DIVIDE          reduce using rule 94 (unary_expression -> function_expression .)
    MOD             reduce using rule 94 (unary_expression -> function_expression .)
    PLUS            reduce using rule 94 (unary_expression -> function_expression .)
    MINUS           reduce using rule 94 (unary_expression -> function_expression .)
    RSHIFT          reduce using rule 94 (unary_expression -> function_expression .)
    LSHIFT          reduce using rule 94 (unary_expression -> function_expression .)
    LT              reduce using rule 94 (unary_expression -> function_expression .)
    LE              reduce using rule 94 (unary_expression -> function_expression .)
    GE              reduce using rule 94 (unary_expression -> function_expression .)
    GT              reduce using rule 94 (unary_expression -> function_expression .)
    EQ              reduce using rule 94 (unary_expression -> function_expression .)
    NE              reduce using rule 94 (unary_expression -> function_expression .)
    BAND            reduce using rule 94 (unary_expression -> function_expression .)
    BOR             reduce using rule 94 (unary_expression -> function_expression .)
    BXOR            reduce using rule 94 (unary_expression -> function_expression .)
    AND             reduce using rule 94 (unary_expression -> function_expression .)
    OR              reduce using rule 94 (unary_expression -> function_expression .)
    RBRACE          reduce using rule 94 (unary_expression -> function_expression .)
    COMMA           reduce using rule 94 (unary_expression -> function_expression .)
    SEMI            reduce using rule 94 (unary_expression -> function_expression .)
    RBRACKET        reduce using rule 94 (unary_expression -> function_expression .)
    RPAREN          reduce using rule 94 (unary_expression -> function_expression .)
    COLON           reduce using rule 94 (unary_expression -> function_expression .)


state 58

    (36) variable_declarator -> identifier . LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> identifier .
    (103) function_expression -> identifier . LPAREN argument_expression_list RPAREN
    (104) function_expression -> identifier . LPAREN RPAREN

    LBRACKET        shift and go to state 30
    EQUALS          reduce using rule 37 (variable_declarator -> identifier .)
    TIMES           reduce using rule 37 (variable_declarator -> identifier .)
    DIVIDE          reduce using rule 37 (variable_declarator -> identifier .)
    MOD             reduce using rule 37 (variable_declarator -> identifier .)
    PLUS            reduce using rule 37 (variable_declarator -> identifier .)
    MINUS           reduce using rule 37 (variable_declarator -> identifier .)
    RSHIFT          reduce using rule 37 (variable_declarator -> identifier .)
    LSHIFT          reduce using rule 37 (variable_declarator -> identifier .)
    LT              reduce using rule 37 (variable_declarator -> identifier .)
    LE              reduce using rule 37 (variable_declarator -> identifier .)
    GE              reduce using rule 37 (variable_declarator -> identifier .)
    GT              reduce using rule 37 (variable_declarator -> identifier .)
    EQ              reduce using rule 37 (variable_declarator -> identifier .)
    NE              reduce using rule 37 (variable_declarator -> identifier .)
    BAND            reduce using rule 37 (variable_declarator -> identifier .)
    BOR             reduce using rule 37 (variable_declarator -> identifier .)
    BXOR            reduce using rule 37 (variable_declarator -> identifier .)
    AND             reduce using rule 37 (variable_declarator -> identifier .)
    OR              reduce using rule 37 (variable_declarator -> identifier .)
    RPAREN          reduce using rule 37 (variable_declarator -> identifier .)
    COMMA           reduce using rule 37 (variable_declarator -> identifier .)
    SEMI            reduce using rule 37 (variable_declarator -> identifier .)
    RBRACE          reduce using rule 37 (variable_declarator -> identifier .)
    COLON           reduce using rule 37 (variable_declarator -> identifier .)
    LPAREN          shift and go to state 98


state 59

    (105) primary_expression -> variable_declarator .

    TIMES           reduce using rule 105 (primary_expression -> variable_declarator .)
    DIVIDE          reduce using rule 105 (primary_expression -> variable_declarator .)
    MOD             reduce using rule 105 (primary_expression -> variable_declarator .)
    PLUS            reduce using rule 105 (primary_expression -> variable_declarator .)
    MINUS           reduce using rule 105 (primary_expression -> variable_declarator .)
    RSHIFT          reduce using rule 105 (primary_expression -> variable_declarator .)
    LSHIFT          reduce using rule 105 (primary_expression -> variable_declarator .)
    LT              reduce using rule 105 (primary_expression -> variable_declarator .)
    LE              reduce using rule 105 (primary_expression -> variable_declarator .)
    GE              reduce using rule 105 (primary_expression -> variable_declarator .)
    GT              reduce using rule 105 (primary_expression -> variable_declarator .)
    EQ              reduce using rule 105 (primary_expression -> variable_declarator .)
    NE              reduce using rule 105 (primary_expression -> variable_declarator .)
    BAND            reduce using rule 105 (primary_expression -> variable_declarator .)
    BOR             reduce using rule 105 (primary_expression -> variable_declarator .)
    BXOR            reduce using rule 105 (primary_expression -> variable_declarator .)
    AND             reduce using rule 105 (primary_expression -> variable_declarator .)
    OR              reduce using rule 105 (primary_expression -> variable_declarator .)
    SEMI            reduce using rule 105 (primary_expression -> variable_declarator .)
    COMMA           reduce using rule 105 (primary_expression -> variable_declarator .)
    RBRACKET        reduce using rule 105 (primary_expression -> variable_declarator .)
    RPAREN          reduce using rule 105 (primary_expression -> variable_declarator .)
    RBRACE          reduce using rule 105 (primary_expression -> variable_declarator .)
    COLON           reduce using rule 105 (primary_expression -> variable_declarator .)


state 60

    (1) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 1 (constant_expression_opt -> empty .)


state 61

    (36) variable_declarator -> identifier LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 99


state 62

    (2) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 2 (constant_expression_opt -> constant_expression .)


state 63

    (73) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 73 (constant_expression -> conditional_expression .)


state 64

    (103) function_expression -> identifier . LPAREN argument_expression_list RPAREN
    (104) function_expression -> identifier . LPAREN RPAREN
    (36) variable_declarator -> identifier . LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> identifier .

    LPAREN          shift and go to state 98
    LBRACKET        shift and go to state 30
    TIMES           reduce using rule 37 (variable_declarator -> identifier .)
    DIVIDE          reduce using rule 37 (variable_declarator -> identifier .)
    MOD             reduce using rule 37 (variable_declarator -> identifier .)
    PLUS            reduce using rule 37 (variable_declarator -> identifier .)
    MINUS           reduce using rule 37 (variable_declarator -> identifier .)
    RSHIFT          reduce using rule 37 (variable_declarator -> identifier .)
    LSHIFT          reduce using rule 37 (variable_declarator -> identifier .)
    LT              reduce using rule 37 (variable_declarator -> identifier .)
    LE              reduce using rule 37 (variable_declarator -> identifier .)
    GE              reduce using rule 37 (variable_declarator -> identifier .)
    GT              reduce using rule 37 (variable_declarator -> identifier .)
    EQ              reduce using rule 37 (variable_declarator -> identifier .)
    NE              reduce using rule 37 (variable_declarator -> identifier .)
    BAND            reduce using rule 37 (variable_declarator -> identifier .)
    BOR             reduce using rule 37 (variable_declarator -> identifier .)
    BXOR            reduce using rule 37 (variable_declarator -> identifier .)
    AND             reduce using rule 37 (variable_declarator -> identifier .)
    OR              reduce using rule 37 (variable_declarator -> identifier .)
    SEMI            reduce using rule 37 (variable_declarator -> identifier .)
    COMMA           reduce using rule 37 (variable_declarator -> identifier .)
    RBRACKET        reduce using rule 37 (variable_declarator -> identifier .)
    RPAREN          reduce using rule 37 (variable_declarator -> identifier .)
    RBRACE          reduce using rule 37 (variable_declarator -> identifier .)
    COLON           reduce using rule 37 (variable_declarator -> identifier .)


state 65

    (22) declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .

    CONST           reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    INTEGER         reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    FLOAT           reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    STRING          reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    ID              reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    CASE            reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    DEFAULT         reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    SEMI            reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    IF              reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    SWITCH          reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    WHILE           reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    DO              reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    FOR             reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    GOTO            reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    BREAK           reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    CONTINUE        reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    RETURN          reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    STRING_LITERAL  reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    LPAREN          reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    PLUS            reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    MINUS           reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    NOT             reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    BNOT            reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    INT_CONST_DEC   reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    INT_CONST_OCT   reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    INT_CONST_HEX   reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    FLOAT_CONST     reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    CHAR_CONST      reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    ENDFOR          reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    ENDIF           reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    PPHASH          reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    VOID            reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    $end            reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    ENDFUNCTION     reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    ENDWHILE        reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    ENDSWITCH       reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)
    ELSE            reduce using rule 22 (declaration_specifiers -> type_qualifier type_specifier init_declarator_list SEMI .)


state 66

    (40) parameter_declaration -> type_specifier . variable_declarator
    (41) parameter_declaration -> type_specifier . BAND variable_declarator
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (111) identifier -> . ID

    BAND            shift and go to state 100
    ID              shift and go to state 22

    variable_declarator            shift and go to state 101
    identifier                     shift and go to state 20

state 67

    (6) parameter_list_opt -> parameter_list .
    (39) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 6 (parameter_list_opt -> parameter_list .)
    COMMA           shift and go to state 102


state 68

    (38) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 38 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 38 (parameter_list -> parameter_declaration .)


state 69

    (16) function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt . RPAREN compound_statement ENDFUNCTION

    RPAREN          shift and go to state 103


state 70

    (5) parameter_list_opt -> empty .

    RPAREN          reduce using rule 5 (parameter_list_opt -> empty .)


state 71

    (72) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 72 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 72 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 72 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 72 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 72 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 72 (assignment_operator -> EQUALS .)
    BNOT            reduce using rule 72 (assignment_operator -> EQUALS .)
    ID              reduce using rule 72 (assignment_operator -> EQUALS .)
    INT_CONST_DEC   reduce using rule 72 (assignment_operator -> EQUALS .)
    INT_CONST_OCT   reduce using rule 72 (assignment_operator -> EQUALS .)
    INT_CONST_HEX   reduce using rule 72 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 72 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 72 (assignment_operator -> EQUALS .)


state 72

    (71) assignment_expression -> variable_declarator assignment_operator . conditional_expression
    (74) conditional_expression -> . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 54
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    conditional_expression         shift and go to state 104
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45
    primary_expression             shift and go to state 49

state 73

    (98) unary_expression -> unary_operator unary_expression .

    TIMES           reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    DIVIDE          reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    MOD             reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    PLUS            reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    MINUS           reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    RSHIFT          reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    LSHIFT          reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    LT              reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    LE              reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    GE              reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    GT              reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    EQ              reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    NE              reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    BAND            reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    BOR             reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    BXOR            reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    AND             reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    OR              reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    RBRACE          reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    COMMA           reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    SEMI            reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    RBRACKET        reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    RPAREN          reduce using rule 98 (unary_expression -> unary_operator unary_expression .)
    COLON           reduce using rule 98 (unary_expression -> unary_operator unary_expression .)


state 74

    (96) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    BAND            reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    BOR             reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    BXOR            reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 96 (unary_expression -> PLUSPLUS unary_expression .)


state 75

    (68) expression -> assignment_expression .

    SEMI            reduce using rule 68 (expression -> assignment_expression .)
    COMMA           reduce using rule 68 (expression -> assignment_expression .)
    COLON           reduce using rule 68 (expression -> assignment_expression .)
    RPAREN          reduce using rule 68 (expression -> assignment_expression .)


state 76

    (108) primary_expression -> LPAREN expression . RPAREN
    (69) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 105
    COMMA           shift and go to state 106


state 77

    (97) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    BAND            reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    BOR             reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    BXOR            reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 97 (unary_expression -> MINUSMINUS unary_expression .)


state 78

    (45) initializer_list -> initializer .

    RBRACE          reduce using rule 45 (initializer_list -> initializer .)
    COMMA           reduce using rule 45 (initializer_list -> initializer .)


state 79

    (43) initializer -> LBRACE initializer_list . RBRACE
    (44) initializer -> LBRACE initializer_list . COMMA RBRACE
    (46) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 108
    COMMA           shift and go to state 107


state 80

    (92) binary_expression -> binary_expression AND . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 109
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 81

    (93) binary_expression -> binary_expression OR . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 110
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 82

    (84) binary_expression -> binary_expression LE . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 111
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 83

    (81) binary_expression -> binary_expression RSHIFT . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 84

    (77) binary_expression -> binary_expression DIVIDE . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 113
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 85

    (91) binary_expression -> binary_expression BXOR . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 114
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 86

    (90) binary_expression -> binary_expression BOR . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 115
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 87

    (85) binary_expression -> binary_expression GE . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 116
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 88

    (76) binary_expression -> binary_expression TIMES . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 117
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 89

    (89) binary_expression -> binary_expression BAND . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 118
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 90

    (83) binary_expression -> binary_expression LT . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 119
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 91

    (86) binary_expression -> binary_expression GT . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 120
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 92

    (79) binary_expression -> binary_expression PLUS . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 121
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 93

    (82) binary_expression -> binary_expression LSHIFT . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 122
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 94

    (87) binary_expression -> binary_expression EQ . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 123
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 95

    (80) binary_expression -> binary_expression MINUS . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 124
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 96

    (88) binary_expression -> binary_expression NE . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 125
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 97

    (78) binary_expression -> binary_expression MOD . binary_expression
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (111) identifier -> . ID
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    ID              shift and go to state 22
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 126
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 59
    primary_expression             shift and go to state 49
    function_expression            shift and go to state 57
    identifier                     shift and go to state 64
    unary_operator                 shift and go to state 45

state 98

    (103) function_expression -> identifier LPAREN . argument_expression_list RPAREN
    (104) function_expression -> identifier LPAREN . RPAREN
    (109) argument_expression_list -> . assignment_expression
    (110) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    RPAREN          shift and go to state 128
    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 127
    unary_expression               shift and go to state 34
    argument_expression_list       shift and go to state 129
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 99

    (36) variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .

    TIMES           reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    DIVIDE          reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    MOD             reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    PLUS            reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    MINUS           reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    RSHIFT          reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    LSHIFT          reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    LT              reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    LE              reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    GE              reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    GT              reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    EQ              reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    NE              reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    BAND            reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    BOR             reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    BXOR            reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    AND             reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    OR              reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    RBRACKET        reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    RBRACE          reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    COLON           reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 36 (variable_declarator -> identifier LBRACKET constant_expression_opt RBRACKET .)


state 100

    (41) parameter_declaration -> type_specifier BAND . variable_declarator
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (111) identifier -> . ID

    ID              shift and go to state 22

    variable_declarator            shift and go to state 130
    identifier                     shift and go to state 20

state 101

    (40) parameter_declaration -> type_specifier variable_declarator .

    COMMA           reduce using rule 40 (parameter_declaration -> type_specifier variable_declarator .)
    RPAREN          reduce using rule 40 (parameter_declaration -> type_specifier variable_declarator .)


state 102

    (39) parameter_list -> parameter_list COMMA . parameter_declaration
    (40) parameter_declaration -> . type_specifier variable_declarator
    (41) parameter_declaration -> . type_specifier BAND variable_declarator
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING

    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11

    parameter_declaration          shift and go to state 131
    type_specifier                 shift and go to state 66

state 103

    (16) function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN . compound_statement ENDFUNCTION
    (47) compound_statement -> . statement_list
    (48) compound_statement -> . declaration_specifiers_list
    (49) compound_statement -> . declaration_specifiers_list statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list statement
    (24) declaration_specifiers_list -> . declaration_specifiers
    (25) declaration_specifiers_list -> . declaration_specifiers_list declaration_specifiers
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    type_specifier                 shift and go to state 137
    compound_statement             shift and go to state 138
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 147
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    statement_list                 shift and go to state 154
    primary_expression             shift and go to state 49
    declaration_specifiers         shift and go to state 142
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    type_qualifier                 shift and go to state 15
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    declaration_specifiers_list    shift and go to state 148
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 104

    (71) assignment_expression -> variable_declarator assignment_operator conditional_expression .

    COLON           reduce using rule 71 (assignment_expression -> variable_declarator assignment_operator conditional_expression .)
    COMMA           reduce using rule 71 (assignment_expression -> variable_declarator assignment_operator conditional_expression .)
    RPAREN          reduce using rule 71 (assignment_expression -> variable_declarator assignment_operator conditional_expression .)
    SEMI            reduce using rule 71 (assignment_expression -> variable_declarator assignment_operator conditional_expression .)
    RBRACE          reduce using rule 71 (assignment_expression -> variable_declarator assignment_operator conditional_expression .)


state 105

    (108) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    BAND            reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    BOR             reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    BXOR            reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 108 (primary_expression -> LPAREN expression RPAREN .)


state 106

    (69) expression -> expression COMMA . assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 157
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 107

    (44) initializer -> LBRACE initializer_list COMMA . RBRACE
    (46) initializer_list -> initializer_list COMMA . initializer
    (42) initializer -> . assignment_expression
    (43) initializer -> . LBRACE initializer_list RBRACE
    (44) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    RBRACE          shift and go to state 159
    LBRACE          shift and go to state 53
    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 41
    unary_expression               shift and go to state 34
    initializer                    shift and go to state 158
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 108

    (43) initializer -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 43 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 43 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 43 (initializer -> LBRACE initializer_list RBRACE .)


state 109

    (92) binary_expression -> binary_expression AND binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    DIVIDE          reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    MOD             reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    PLUS            reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    MINUS           reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    RSHIFT          reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    LSHIFT          reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    LT              reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    LE              reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    GE              reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    GT              reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    EQ              reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    NE              reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    BAND            reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    BOR             reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    BXOR            reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .)
    OR              shift and go to state 81

  ! OR              [ reduce using rule 92 (binary_expression -> binary_expression AND binary_expression .) ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 95 ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]
  ! AND             [ shift and go to state 80 ]


state 110

    (93) binary_expression -> binary_expression OR binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    DIVIDE          reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    MOD             reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    PLUS            reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    MINUS           reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    RSHIFT          reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    LSHIFT          reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    LT              reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    LE              reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    GE              reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    GT              reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    EQ              reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    NE              reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    BAND            reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    BOR             reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    BXOR            reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    AND             reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 93 (binary_expression -> binary_expression OR binary_expression .)

  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 95 ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]


state 111

    (84) binary_expression -> binary_expression LE binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    BAND            reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    BOR             reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    BXOR            reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    COLON           reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! AND             [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! OR              [ reduce using rule 84 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 112

    (81) binary_expression -> binary_expression RSHIFT binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    RSHIFT          reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    BAND            reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    BOR             reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    BXOR            reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    SEMI            reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COMMA           reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COLON           reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! AND             [ reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! OR              [ reduce using rule 81 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 113

    (77) binary_expression -> binary_expression DIVIDE binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BAND            reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BOR             reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BXOR            reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COLON           reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! AND             [ reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .) ]
  ! OR              [ reduce using rule 77 (binary_expression -> binary_expression DIVIDE binary_expression .) ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 95 ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 114

    (91) binary_expression -> binary_expression BXOR binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    BOR             reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .)
    BXOR            reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .)
    SEMI            reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .)
    COMMA           reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .)
    RBRACKET        reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .)
    RPAREN          reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .)
    RBRACE          reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .)
    COLON           reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    LT              shift and go to state 90
    LE              shift and go to state 82
    GE              shift and go to state 87
    GT              shift and go to state 91
    EQ              shift and go to state 94
    NE              shift and go to state 96
    BAND            shift and go to state 89
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! MOD             [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! PLUS            [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! MINUS           [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! LT              [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! LE              [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! GE              [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! GT              [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! EQ              [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! NE              [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! BAND            [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! AND             [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! OR              [ reduce using rule 91 (binary_expression -> binary_expression BXOR binary_expression .) ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 115

    (90) binary_expression -> binary_expression BOR binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    BOR             reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .)
    SEMI            reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .)
    COMMA           reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .)
    RBRACKET        reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .)
    RPAREN          reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .)
    RBRACE          reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .)
    COLON           reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    LT              shift and go to state 90
    LE              shift and go to state 82
    GE              shift and go to state 87
    GT              shift and go to state 91
    EQ              shift and go to state 94
    NE              shift and go to state 96
    BAND            shift and go to state 89
    BXOR            shift and go to state 85
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! MOD             [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! PLUS            [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! MINUS           [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! LT              [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! LE              [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! GE              [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! GT              [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! EQ              [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! NE              [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! BAND            [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! BXOR            [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! AND             [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! OR              [ reduce using rule 90 (binary_expression -> binary_expression BOR binary_expression .) ]
  ! BOR             [ shift and go to state 86 ]


state 116

    (85) binary_expression -> binary_expression GE binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    BAND            reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    BOR             reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    BXOR            reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    COLON           reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! AND             [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! OR              [ reduce using rule 85 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 117

    (76) binary_expression -> binary_expression TIMES binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    BAND            reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    BOR             reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    BXOR            reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    COLON           reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! AND             [ reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .) ]
  ! OR              [ reduce using rule 76 (binary_expression -> binary_expression TIMES binary_expression .) ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 95 ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 118

    (89) binary_expression -> binary_expression BAND binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    BAND            reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    BOR             reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    BXOR            reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    SEMI            reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    COMMA           reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    RBRACKET        reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    RPAREN          reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    RBRACE          reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    COLON           reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    LT              shift and go to state 90
    LE              shift and go to state 82
    GE              shift and go to state 87
    GT              shift and go to state 91
    EQ              shift and go to state 94
    NE              shift and go to state 96
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! MOD             [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! PLUS            [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! MINUS           [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! LT              [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! LE              [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! GE              [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! GT              [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! EQ              [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! NE              [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! AND             [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! OR              [ reduce using rule 89 (binary_expression -> binary_expression BAND binary_expression .) ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 119

    (83) binary_expression -> binary_expression LT binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    BAND            reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    BOR             reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    BXOR            reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! AND             [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! OR              [ reduce using rule 83 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 120

    (86) binary_expression -> binary_expression GT binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    BAND            reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    BOR             reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    BXOR            reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! AND             [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! OR              [ reduce using rule 86 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 121

    (79) binary_expression -> binary_expression PLUS binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    BAND            reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    BOR             reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    BXOR            reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! AND             [ reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! OR              [ reduce using rule 79 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 95 ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 122

    (82) binary_expression -> binary_expression LSHIFT binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    RSHIFT          reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    BAND            reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    BOR             reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    BXOR            reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    SEMI            reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COMMA           reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COLON           reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! AND             [ reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! OR              [ reduce using rule 82 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 123

    (87) binary_expression -> binary_expression EQ binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    BAND            reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    BOR             reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    BXOR            reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    LT              shift and go to state 90
    LE              shift and go to state 82
    GE              shift and go to state 87
    GT              shift and go to state 91
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! RSHIFT          [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LSHIFT          [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! AND             [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! OR              [ reduce using rule 87 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 124

    (80) binary_expression -> binary_expression MINUS binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    BAND            reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    BOR             reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    BXOR            reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! AND             [ reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! OR              [ reduce using rule 80 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 95 ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 125

    (88) binary_expression -> binary_expression NE binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    BAND            reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    BOR             reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    BXOR            reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 95
    RSHIFT          shift and go to state 83
    LSHIFT          shift and go to state 93
    LT              shift and go to state 90
    LE              shift and go to state 82
    GE              shift and go to state 87
    GT              shift and go to state 91
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! TIMES           [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! AND             [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! OR              [ reduce using rule 88 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 126

    (78) binary_expression -> binary_expression MOD binary_expression .
    (76) binary_expression -> binary_expression . TIMES binary_expression
    (77) binary_expression -> binary_expression . DIVIDE binary_expression
    (78) binary_expression -> binary_expression . MOD binary_expression
    (79) binary_expression -> binary_expression . PLUS binary_expression
    (80) binary_expression -> binary_expression . MINUS binary_expression
    (81) binary_expression -> binary_expression . RSHIFT binary_expression
    (82) binary_expression -> binary_expression . LSHIFT binary_expression
    (83) binary_expression -> binary_expression . LT binary_expression
    (84) binary_expression -> binary_expression . LE binary_expression
    (85) binary_expression -> binary_expression . GE binary_expression
    (86) binary_expression -> binary_expression . GT binary_expression
    (87) binary_expression -> binary_expression . EQ binary_expression
    (88) binary_expression -> binary_expression . NE binary_expression
    (89) binary_expression -> binary_expression . BAND binary_expression
    (90) binary_expression -> binary_expression . BOR binary_expression
    (91) binary_expression -> binary_expression . BXOR binary_expression
    (92) binary_expression -> binary_expression . AND binary_expression
    (93) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    BAND            reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    BOR             reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    BXOR            reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    COLON           reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .)
    AND             shift and go to state 80
    OR              shift and go to state 81

  ! AND             [ reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .) ]
  ! OR              [ reduce using rule 78 (binary_expression -> binary_expression MOD binary_expression .) ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 95 ]
  ! RSHIFT          [ shift and go to state 83 ]
  ! LSHIFT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 94 ]
  ! NE              [ shift and go to state 96 ]
  ! BAND            [ shift and go to state 89 ]
  ! BOR             [ shift and go to state 86 ]
  ! BXOR            [ shift and go to state 85 ]


state 127

    (109) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 109 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 109 (argument_expression_list -> assignment_expression .)


state 128

    (104) function_expression -> identifier LPAREN RPAREN .

    TIMES           reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    MOD             reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    PLUS            reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    MINUS           reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    RSHIFT          reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    LSHIFT          reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    LT              reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    LE              reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    GE              reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    GT              reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    EQ              reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    NE              reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    BAND            reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    BOR             reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    BXOR            reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    AND             reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    OR              reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    SEMI            reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    COMMA           reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    RBRACKET        reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    RBRACE          reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)
    COLON           reduce using rule 104 (function_expression -> identifier LPAREN RPAREN .)


state 129

    (103) function_expression -> identifier LPAREN argument_expression_list . RPAREN
    (110) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 161


state 130

    (41) parameter_declaration -> type_specifier BAND variable_declarator .

    COMMA           reduce using rule 41 (parameter_declaration -> type_specifier BAND variable_declarator .)
    RPAREN          reduce using rule 41 (parameter_declaration -> type_specifier BAND variable_declarator .)


state 131

    (39) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 39 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 39 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 132

    (18) statement -> expression_statement .

    ID              reduce using rule 18 (statement -> expression_statement .)
    CASE            reduce using rule 18 (statement -> expression_statement .)
    DEFAULT         reduce using rule 18 (statement -> expression_statement .)
    SEMI            reduce using rule 18 (statement -> expression_statement .)
    IF              reduce using rule 18 (statement -> expression_statement .)
    SWITCH          reduce using rule 18 (statement -> expression_statement .)
    WHILE           reduce using rule 18 (statement -> expression_statement .)
    DO              reduce using rule 18 (statement -> expression_statement .)
    FOR             reduce using rule 18 (statement -> expression_statement .)
    GOTO            reduce using rule 18 (statement -> expression_statement .)
    BREAK           reduce using rule 18 (statement -> expression_statement .)
    CONTINUE        reduce using rule 18 (statement -> expression_statement .)
    RETURN          reduce using rule 18 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 18 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 18 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 18 (statement -> expression_statement .)
    LPAREN          reduce using rule 18 (statement -> expression_statement .)
    PLUS            reduce using rule 18 (statement -> expression_statement .)
    MINUS           reduce using rule 18 (statement -> expression_statement .)
    NOT             reduce using rule 18 (statement -> expression_statement .)
    BNOT            reduce using rule 18 (statement -> expression_statement .)
    INT_CONST_DEC   reduce using rule 18 (statement -> expression_statement .)
    INT_CONST_OCT   reduce using rule 18 (statement -> expression_statement .)
    INT_CONST_HEX   reduce using rule 18 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 18 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 18 (statement -> expression_statement .)
    ENDFUNCTION     reduce using rule 18 (statement -> expression_statement .)
    ENDWHILE        reduce using rule 18 (statement -> expression_statement .)
    ENDSWITCH       reduce using rule 18 (statement -> expression_statement .)
    ENDIF           reduce using rule 18 (statement -> expression_statement .)
    ELSE            reduce using rule 18 (statement -> expression_statement .)
    ENDFOR          reduce using rule 18 (statement -> expression_statement .)


state 133

    (20) statement -> iteration_statement .

    ID              reduce using rule 20 (statement -> iteration_statement .)
    CASE            reduce using rule 20 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 20 (statement -> iteration_statement .)
    SEMI            reduce using rule 20 (statement -> iteration_statement .)
    IF              reduce using rule 20 (statement -> iteration_statement .)
    SWITCH          reduce using rule 20 (statement -> iteration_statement .)
    WHILE           reduce using rule 20 (statement -> iteration_statement .)
    DO              reduce using rule 20 (statement -> iteration_statement .)
    FOR             reduce using rule 20 (statement -> iteration_statement .)
    GOTO            reduce using rule 20 (statement -> iteration_statement .)
    BREAK           reduce using rule 20 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 20 (statement -> iteration_statement .)
    RETURN          reduce using rule 20 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 20 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 20 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 20 (statement -> iteration_statement .)
    LPAREN          reduce using rule 20 (statement -> iteration_statement .)
    PLUS            reduce using rule 20 (statement -> iteration_statement .)
    MINUS           reduce using rule 20 (statement -> iteration_statement .)
    NOT             reduce using rule 20 (statement -> iteration_statement .)
    BNOT            reduce using rule 20 (statement -> iteration_statement .)
    INT_CONST_DEC   reduce using rule 20 (statement -> iteration_statement .)
    INT_CONST_OCT   reduce using rule 20 (statement -> iteration_statement .)
    INT_CONST_HEX   reduce using rule 20 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 20 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 20 (statement -> iteration_statement .)
    ENDFUNCTION     reduce using rule 20 (statement -> iteration_statement .)
    ENDWHILE        reduce using rule 20 (statement -> iteration_statement .)
    ENDSWITCH       reduce using rule 20 (statement -> iteration_statement .)
    ENDIF           reduce using rule 20 (statement -> iteration_statement .)
    ELSE            reduce using rule 20 (statement -> iteration_statement .)
    ENDFOR          reduce using rule 20 (statement -> iteration_statement .)


state 134

    (61) jump_statement -> GOTO . ID SEMI

    ID              shift and go to state 162


state 135

    (17) statement -> labeled_statement .

    ID              reduce using rule 17 (statement -> labeled_statement .)
    CASE            reduce using rule 17 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 17 (statement -> labeled_statement .)
    SEMI            reduce using rule 17 (statement -> labeled_statement .)
    IF              reduce using rule 17 (statement -> labeled_statement .)
    SWITCH          reduce using rule 17 (statement -> labeled_statement .)
    WHILE           reduce using rule 17 (statement -> labeled_statement .)
    DO              reduce using rule 17 (statement -> labeled_statement .)
    FOR             reduce using rule 17 (statement -> labeled_statement .)
    GOTO            reduce using rule 17 (statement -> labeled_statement .)
    BREAK           reduce using rule 17 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 17 (statement -> labeled_statement .)
    RETURN          reduce using rule 17 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 17 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 17 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 17 (statement -> labeled_statement .)
    LPAREN          reduce using rule 17 (statement -> labeled_statement .)
    PLUS            reduce using rule 17 (statement -> labeled_statement .)
    MINUS           reduce using rule 17 (statement -> labeled_statement .)
    NOT             reduce using rule 17 (statement -> labeled_statement .)
    BNOT            reduce using rule 17 (statement -> labeled_statement .)
    INT_CONST_DEC   reduce using rule 17 (statement -> labeled_statement .)
    INT_CONST_OCT   reduce using rule 17 (statement -> labeled_statement .)
    INT_CONST_HEX   reduce using rule 17 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 17 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 17 (statement -> labeled_statement .)
    ENDFUNCTION     reduce using rule 17 (statement -> labeled_statement .)
    ENDWHILE        reduce using rule 17 (statement -> labeled_statement .)
    ENDSWITCH       reduce using rule 17 (statement -> labeled_statement .)
    ENDIF           reduce using rule 17 (statement -> labeled_statement .)
    ELSE            reduce using rule 17 (statement -> labeled_statement .)
    ENDFOR          reduce using rule 17 (statement -> labeled_statement .)


state 136

    (64) jump_statement -> RETURN . expression SEMI
    (65) jump_statement -> RETURN . SEMI
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    SEMI            shift and go to state 163
    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 164
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 137

    (23) declaration_specifiers -> type_specifier . init_declarator_list SEMI
    (32) init_declarator_list -> . init_declarator
    (33) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (34) init_declarator -> . variable_declarator
    (35) init_declarator -> . variable_declarator EQUALS initializer
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (111) identifier -> . ID

    ID              shift and go to state 22

    variable_declarator            shift and go to state 19
    init_declarator                shift and go to state 21
    init_declarator_list           shift and go to state 18
    identifier                     shift and go to state 20

state 138

    (16) function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement . ENDFUNCTION

    ENDFUNCTION     shift and go to state 165


state 139

    (60) iteration_statement -> FOR . LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR

    LPAREN          shift and go to state 166


state 140

    (63) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 167


state 141

    (66) expression_statement -> expression . SEMI
    (69) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 168
    COMMA           shift and go to state 106


state 142

    (24) declaration_specifiers_list -> declaration_specifiers .

    CONST           reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    INTEGER         reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    FLOAT           reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    STRING          reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    ID              reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    CASE            reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    DEFAULT         reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    SEMI            reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    IF              reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    SWITCH          reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    WHILE           reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    DO              reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    FOR             reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    GOTO            reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    BREAK           reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    CONTINUE        reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    RETURN          reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    PLUSPLUS        reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    MINUSMINUS      reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    STRING_LITERAL  reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    LPAREN          reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    PLUS            reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    MINUS           reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    NOT             reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    BNOT            reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    INT_CONST_DEC   reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    INT_CONST_OCT   reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    INT_CONST_HEX   reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    FLOAT_CONST     reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    CHAR_CONST      reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    ENDFOR          reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    ENDFUNCTION     reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    ENDIF           reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    ENDSWITCH       reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    ELSE            reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)
    ENDWHILE        reduce using rule 24 (declaration_specifiers_list -> declaration_specifiers .)


state 143

    (54) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 169


state 144

    (58) iteration_statement -> WHILE . LPAREN expression RPAREN compound_statement ENDWHILE

    LPAREN          shift and go to state 170


state 145

    (53) labeled_statement -> CASE . expression COLON statement
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 171
    primary_expression             shift and go to state 49
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 146

    (57) selection_statement -> SWITCH . LPAREN expression RPAREN compound_statement ENDSWITCH

    LPAREN          shift and go to state 172


state 147

    (50) statement_list -> statement .

    ID              reduce using rule 50 (statement_list -> statement .)
    CASE            reduce using rule 50 (statement_list -> statement .)
    DEFAULT         reduce using rule 50 (statement_list -> statement .)
    SEMI            reduce using rule 50 (statement_list -> statement .)
    IF              reduce using rule 50 (statement_list -> statement .)
    SWITCH          reduce using rule 50 (statement_list -> statement .)
    WHILE           reduce using rule 50 (statement_list -> statement .)
    DO              reduce using rule 50 (statement_list -> statement .)
    FOR             reduce using rule 50 (statement_list -> statement .)
    GOTO            reduce using rule 50 (statement_list -> statement .)
    BREAK           reduce using rule 50 (statement_list -> statement .)
    CONTINUE        reduce using rule 50 (statement_list -> statement .)
    RETURN          reduce using rule 50 (statement_list -> statement .)
    PLUSPLUS        reduce using rule 50 (statement_list -> statement .)
    MINUSMINUS      reduce using rule 50 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 50 (statement_list -> statement .)
    LPAREN          reduce using rule 50 (statement_list -> statement .)
    PLUS            reduce using rule 50 (statement_list -> statement .)
    MINUS           reduce using rule 50 (statement_list -> statement .)
    NOT             reduce using rule 50 (statement_list -> statement .)
    BNOT            reduce using rule 50 (statement_list -> statement .)
    INT_CONST_DEC   reduce using rule 50 (statement_list -> statement .)
    INT_CONST_OCT   reduce using rule 50 (statement_list -> statement .)
    INT_CONST_HEX   reduce using rule 50 (statement_list -> statement .)
    FLOAT_CONST     reduce using rule 50 (statement_list -> statement .)
    CHAR_CONST      reduce using rule 50 (statement_list -> statement .)
    ENDFOR          reduce using rule 50 (statement_list -> statement .)
    ENDFUNCTION     reduce using rule 50 (statement_list -> statement .)
    ENDWHILE        reduce using rule 50 (statement_list -> statement .)
    ENDSWITCH       reduce using rule 50 (statement_list -> statement .)
    ENDIF           reduce using rule 50 (statement_list -> statement .)
    ELSE            reduce using rule 50 (statement_list -> statement .)


state 148

    (48) compound_statement -> declaration_specifiers_list .
    (49) compound_statement -> declaration_specifiers_list . statement_list
    (25) declaration_specifiers_list -> declaration_specifiers_list . declaration_specifiers
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list statement
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

  ! shift/reduce conflict for WHILE resolved as shift
    ENDWHILE        reduce using rule 48 (compound_statement -> declaration_specifiers_list .)
    ENDIF           reduce using rule 48 (compound_statement -> declaration_specifiers_list .)
    ENDSWITCH       reduce using rule 48 (compound_statement -> declaration_specifiers_list .)
    ELSE            reduce using rule 48 (compound_statement -> declaration_specifiers_list .)
    ENDFOR          reduce using rule 48 (compound_statement -> declaration_specifiers_list .)
    ENDFUNCTION     reduce using rule 48 (compound_statement -> declaration_specifiers_list .)
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

  ! WHILE           [ reduce using rule 48 (compound_statement -> declaration_specifiers_list .) ]

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    type_specifier                 shift and go to state 137
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 147
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    primary_expression             shift and go to state 49
    declaration_specifiers         shift and go to state 173
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    type_qualifier                 shift and go to state 15
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    statement_list                 shift and go to state 174
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 149

    (21) statement -> jump_statement .

    ID              reduce using rule 21 (statement -> jump_statement .)
    CASE            reduce using rule 21 (statement -> jump_statement .)
    DEFAULT         reduce using rule 21 (statement -> jump_statement .)
    SEMI            reduce using rule 21 (statement -> jump_statement .)
    IF              reduce using rule 21 (statement -> jump_statement .)
    SWITCH          reduce using rule 21 (statement -> jump_statement .)
    WHILE           reduce using rule 21 (statement -> jump_statement .)
    DO              reduce using rule 21 (statement -> jump_statement .)
    FOR             reduce using rule 21 (statement -> jump_statement .)
    GOTO            reduce using rule 21 (statement -> jump_statement .)
    BREAK           reduce using rule 21 (statement -> jump_statement .)
    CONTINUE        reduce using rule 21 (statement -> jump_statement .)
    RETURN          reduce using rule 21 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 21 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 21 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 21 (statement -> jump_statement .)
    LPAREN          reduce using rule 21 (statement -> jump_statement .)
    PLUS            reduce using rule 21 (statement -> jump_statement .)
    MINUS           reduce using rule 21 (statement -> jump_statement .)
    NOT             reduce using rule 21 (statement -> jump_statement .)
    BNOT            reduce using rule 21 (statement -> jump_statement .)
    INT_CONST_DEC   reduce using rule 21 (statement -> jump_statement .)
    INT_CONST_OCT   reduce using rule 21 (statement -> jump_statement .)
    INT_CONST_HEX   reduce using rule 21 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 21 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 21 (statement -> jump_statement .)
    ENDFUNCTION     reduce using rule 21 (statement -> jump_statement .)
    ENDWHILE        reduce using rule 21 (statement -> jump_statement .)
    ENDSWITCH       reduce using rule 21 (statement -> jump_statement .)
    ENDIF           reduce using rule 21 (statement -> jump_statement .)
    ELSE            reduce using rule 21 (statement -> jump_statement .)
    ENDFOR          reduce using rule 21 (statement -> jump_statement .)


state 150

    (62) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 175


state 151

    (59) iteration_statement -> DO . compound_statement WHILE LPAREN expression RPAREN
    (47) compound_statement -> . statement_list
    (48) compound_statement -> . declaration_specifiers_list
    (49) compound_statement -> . declaration_specifiers_list statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list statement
    (24) declaration_specifiers_list -> . declaration_specifiers
    (25) declaration_specifiers_list -> . declaration_specifiers_list declaration_specifiers
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    type_specifier                 shift and go to state 137
    compound_statement             shift and go to state 176
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 147
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    statement_list                 shift and go to state 154
    primary_expression             shift and go to state 49
    declaration_specifiers         shift and go to state 142
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    type_qualifier                 shift and go to state 15
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    declaration_specifiers_list    shift and go to state 148
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 152

    (67) expression_statement -> SEMI .

    ID              reduce using rule 67 (expression_statement -> SEMI .)
    CASE            reduce using rule 67 (expression_statement -> SEMI .)
    DEFAULT         reduce using rule 67 (expression_statement -> SEMI .)
    SEMI            reduce using rule 67 (expression_statement -> SEMI .)
    IF              reduce using rule 67 (expression_statement -> SEMI .)
    SWITCH          reduce using rule 67 (expression_statement -> SEMI .)
    WHILE           reduce using rule 67 (expression_statement -> SEMI .)
    DO              reduce using rule 67 (expression_statement -> SEMI .)
    FOR             reduce using rule 67 (expression_statement -> SEMI .)
    GOTO            reduce using rule 67 (expression_statement -> SEMI .)
    BREAK           reduce using rule 67 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 67 (expression_statement -> SEMI .)
    RETURN          reduce using rule 67 (expression_statement -> SEMI .)
    PLUSPLUS        reduce using rule 67 (expression_statement -> SEMI .)
    MINUSMINUS      reduce using rule 67 (expression_statement -> SEMI .)
    STRING_LITERAL  reduce using rule 67 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 67 (expression_statement -> SEMI .)
    PLUS            reduce using rule 67 (expression_statement -> SEMI .)
    MINUS           reduce using rule 67 (expression_statement -> SEMI .)
    NOT             reduce using rule 67 (expression_statement -> SEMI .)
    BNOT            reduce using rule 67 (expression_statement -> SEMI .)
    INT_CONST_DEC   reduce using rule 67 (expression_statement -> SEMI .)
    INT_CONST_OCT   reduce using rule 67 (expression_statement -> SEMI .)
    INT_CONST_HEX   reduce using rule 67 (expression_statement -> SEMI .)
    FLOAT_CONST     reduce using rule 67 (expression_statement -> SEMI .)
    CHAR_CONST      reduce using rule 67 (expression_statement -> SEMI .)
    ENDFUNCTION     reduce using rule 67 (expression_statement -> SEMI .)
    ENDWHILE        reduce using rule 67 (expression_statement -> SEMI .)
    ENDSWITCH       reduce using rule 67 (expression_statement -> SEMI .)
    ENDIF           reduce using rule 67 (expression_statement -> SEMI .)
    ELSE            reduce using rule 67 (expression_statement -> SEMI .)
    ENDFOR          reduce using rule 67 (expression_statement -> SEMI .)


state 153

    (19) statement -> selection_statement .

    ID              reduce using rule 19 (statement -> selection_statement .)
    CASE            reduce using rule 19 (statement -> selection_statement .)
    DEFAULT         reduce using rule 19 (statement -> selection_statement .)
    SEMI            reduce using rule 19 (statement -> selection_statement .)
    IF              reduce using rule 19 (statement -> selection_statement .)
    SWITCH          reduce using rule 19 (statement -> selection_statement .)
    WHILE           reduce using rule 19 (statement -> selection_statement .)
    DO              reduce using rule 19 (statement -> selection_statement .)
    FOR             reduce using rule 19 (statement -> selection_statement .)
    GOTO            reduce using rule 19 (statement -> selection_statement .)
    BREAK           reduce using rule 19 (statement -> selection_statement .)
    CONTINUE        reduce using rule 19 (statement -> selection_statement .)
    RETURN          reduce using rule 19 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 19 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 19 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 19 (statement -> selection_statement .)
    LPAREN          reduce using rule 19 (statement -> selection_statement .)
    PLUS            reduce using rule 19 (statement -> selection_statement .)
    MINUS           reduce using rule 19 (statement -> selection_statement .)
    NOT             reduce using rule 19 (statement -> selection_statement .)
    BNOT            reduce using rule 19 (statement -> selection_statement .)
    INT_CONST_DEC   reduce using rule 19 (statement -> selection_statement .)
    INT_CONST_OCT   reduce using rule 19 (statement -> selection_statement .)
    INT_CONST_HEX   reduce using rule 19 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 19 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 19 (statement -> selection_statement .)
    ENDFUNCTION     reduce using rule 19 (statement -> selection_statement .)
    ENDWHILE        reduce using rule 19 (statement -> selection_statement .)
    ENDSWITCH       reduce using rule 19 (statement -> selection_statement .)
    ENDIF           reduce using rule 19 (statement -> selection_statement .)
    ELSE            reduce using rule 19 (statement -> selection_statement .)
    ENDFOR          reduce using rule 19 (statement -> selection_statement .)


state 154

    (47) compound_statement -> statement_list .
    (51) statement_list -> statement_list . statement
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

  ! shift/reduce conflict for WHILE resolved as shift
    ENDWHILE        reduce using rule 47 (compound_statement -> statement_list .)
    ENDIF           reduce using rule 47 (compound_statement -> statement_list .)
    ENDSWITCH       reduce using rule 47 (compound_statement -> statement_list .)
    ELSE            reduce using rule 47 (compound_statement -> statement_list .)
    ENDFOR          reduce using rule 47 (compound_statement -> statement_list .)
    ENDFUNCTION     reduce using rule 47 (compound_statement -> statement_list .)
    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

  ! WHILE           [ reduce using rule 47 (compound_statement -> statement_list .) ]

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 177
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    primary_expression             shift and go to state 49
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 155

    (52) labeled_statement -> ID . COLON statement
    (111) identifier -> ID .

    COLON           shift and go to state 178
    LBRACKET        reduce using rule 111 (identifier -> ID .)
    LPAREN          reduce using rule 111 (identifier -> ID .)
    EQUALS          reduce using rule 111 (identifier -> ID .)
    TIMES           reduce using rule 111 (identifier -> ID .)
    DIVIDE          reduce using rule 111 (identifier -> ID .)
    MOD             reduce using rule 111 (identifier -> ID .)
    PLUS            reduce using rule 111 (identifier -> ID .)
    MINUS           reduce using rule 111 (identifier -> ID .)
    RSHIFT          reduce using rule 111 (identifier -> ID .)
    LSHIFT          reduce using rule 111 (identifier -> ID .)
    LT              reduce using rule 111 (identifier -> ID .)
    LE              reduce using rule 111 (identifier -> ID .)
    GE              reduce using rule 111 (identifier -> ID .)
    GT              reduce using rule 111 (identifier -> ID .)
    EQ              reduce using rule 111 (identifier -> ID .)
    NE              reduce using rule 111 (identifier -> ID .)
    BAND            reduce using rule 111 (identifier -> ID .)
    BOR             reduce using rule 111 (identifier -> ID .)
    BXOR            reduce using rule 111 (identifier -> ID .)
    AND             reduce using rule 111 (identifier -> ID .)
    OR              reduce using rule 111 (identifier -> ID .)
    SEMI            reduce using rule 111 (identifier -> ID .)
    COMMA           reduce using rule 111 (identifier -> ID .)


state 156

    (55) selection_statement -> IF . LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> IF . LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF

    LPAREN          shift and go to state 179


state 157

    (69) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 69 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 69 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 69 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 69 (expression -> expression COMMA assignment_expression .)


state 158

    (46) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 46 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 46 (initializer_list -> initializer_list COMMA initializer .)


state 159

    (44) initializer -> LBRACE initializer_list COMMA RBRACE .

    RBRACE          reduce using rule 44 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 44 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 44 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 160

    (103) function_expression -> identifier LPAREN argument_expression_list RPAREN .

    TIMES           reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    BAND            reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    BOR             reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    BXOR            reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 103 (function_expression -> identifier LPAREN argument_expression_list RPAREN .)


state 161

    (110) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    binary_expression              shift and go to state 54
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 180

state 162

    (61) jump_statement -> GOTO ID . SEMI

    SEMI            shift and go to state 181


state 163

    (65) jump_statement -> RETURN SEMI .

    ID              reduce using rule 65 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 65 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 65 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 65 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 65 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 65 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 65 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 65 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 65 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 65 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 65 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 65 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 65 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 65 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 65 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 65 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 65 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 65 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 65 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 65 (jump_statement -> RETURN SEMI .)
    BNOT            reduce using rule 65 (jump_statement -> RETURN SEMI .)
    INT_CONST_DEC   reduce using rule 65 (jump_statement -> RETURN SEMI .)
    INT_CONST_OCT   reduce using rule 65 (jump_statement -> RETURN SEMI .)
    INT_CONST_HEX   reduce using rule 65 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 65 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 65 (jump_statement -> RETURN SEMI .)
    ENDSWITCH       reduce using rule 65 (jump_statement -> RETURN SEMI .)
    ENDFUNCTION     reduce using rule 65 (jump_statement -> RETURN SEMI .)
    ENDWHILE        reduce using rule 65 (jump_statement -> RETURN SEMI .)
    ENDIF           reduce using rule 65 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 65 (jump_statement -> RETURN SEMI .)
    ENDFOR          reduce using rule 65 (jump_statement -> RETURN SEMI .)


state 164

    (64) jump_statement -> RETURN expression . SEMI
    (69) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 182
    COMMA           shift and go to state 106


state 165

    (16) function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION .

    PPHASH          reduce using rule 16 (function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION .)
    CONST           reduce using rule 16 (function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION .)
    INTEGER         reduce using rule 16 (function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION .)
    FLOAT           reduce using rule 16 (function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION .)
    STRING          reduce using rule 16 (function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION .)
    VOID            reduce using rule 16 (function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION .)
    $end            reduce using rule 16 (function_definition -> function_type_specifier FUNCTION identifier LPAREN parameter_list_opt RPAREN compound_statement ENDFUNCTION .)


state 166

    (60) iteration_statement -> FOR LPAREN . expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 183
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 167

    (63) jump_statement -> CONTINUE SEMI .

    ID              reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    BNOT            reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_DEC   reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_OCT   reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_HEX   reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    FLOAT_CONST     reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    CHAR_CONST      reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    ENDSWITCH       reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    ENDFUNCTION     reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    ENDWHILE        reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    ENDIF           reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 63 (jump_statement -> CONTINUE SEMI .)
    ENDFOR          reduce using rule 63 (jump_statement -> CONTINUE SEMI .)


state 168

    (66) expression_statement -> expression SEMI .

    ID              reduce using rule 66 (expression_statement -> expression SEMI .)
    CASE            reduce using rule 66 (expression_statement -> expression SEMI .)
    DEFAULT         reduce using rule 66 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 66 (expression_statement -> expression SEMI .)
    IF              reduce using rule 66 (expression_statement -> expression SEMI .)
    SWITCH          reduce using rule 66 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 66 (expression_statement -> expression SEMI .)
    DO              reduce using rule 66 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 66 (expression_statement -> expression SEMI .)
    GOTO            reduce using rule 66 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 66 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 66 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 66 (expression_statement -> expression SEMI .)
    PLUSPLUS        reduce using rule 66 (expression_statement -> expression SEMI .)
    MINUSMINUS      reduce using rule 66 (expression_statement -> expression SEMI .)
    STRING_LITERAL  reduce using rule 66 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 66 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 66 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 66 (expression_statement -> expression SEMI .)
    NOT             reduce using rule 66 (expression_statement -> expression SEMI .)
    BNOT            reduce using rule 66 (expression_statement -> expression SEMI .)
    INT_CONST_DEC   reduce using rule 66 (expression_statement -> expression SEMI .)
    INT_CONST_OCT   reduce using rule 66 (expression_statement -> expression SEMI .)
    INT_CONST_HEX   reduce using rule 66 (expression_statement -> expression SEMI .)
    FLOAT_CONST     reduce using rule 66 (expression_statement -> expression SEMI .)
    CHAR_CONST      reduce using rule 66 (expression_statement -> expression SEMI .)
    ENDFUNCTION     reduce using rule 66 (expression_statement -> expression SEMI .)
    ENDWHILE        reduce using rule 66 (expression_statement -> expression SEMI .)
    ENDSWITCH       reduce using rule 66 (expression_statement -> expression SEMI .)
    ENDIF           reduce using rule 66 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 66 (expression_statement -> expression SEMI .)
    ENDFOR          reduce using rule 66 (expression_statement -> expression SEMI .)


state 169

    (54) labeled_statement -> DEFAULT COLON . statement
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 184
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    primary_expression             shift and go to state 49
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 170

    (58) iteration_statement -> WHILE LPAREN . expression RPAREN compound_statement ENDWHILE
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 185
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 171

    (53) labeled_statement -> CASE expression . COLON statement
    (69) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 186
    COMMA           shift and go to state 106


state 172

    (57) selection_statement -> SWITCH LPAREN . expression RPAREN compound_statement ENDSWITCH
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 187
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 173

    (25) declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .

    CONST           reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    INTEGER         reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    FLOAT           reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    STRING          reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    ID              reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    CASE            reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    DEFAULT         reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    SEMI            reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    IF              reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    SWITCH          reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    WHILE           reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    DO              reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    FOR             reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    GOTO            reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    BREAK           reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    CONTINUE        reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    RETURN          reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    PLUSPLUS        reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    MINUSMINUS      reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    STRING_LITERAL  reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    LPAREN          reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    PLUS            reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    MINUS           reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    NOT             reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    BNOT            reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    INT_CONST_DEC   reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    INT_CONST_OCT   reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    INT_CONST_HEX   reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    FLOAT_CONST     reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    CHAR_CONST      reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    ENDFOR          reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    ENDFUNCTION     reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    ENDIF           reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    ENDSWITCH       reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    ELSE            reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)
    ENDWHILE        reduce using rule 25 (declaration_specifiers_list -> declaration_specifiers_list declaration_specifiers .)


state 174

    (49) compound_statement -> declaration_specifiers_list statement_list .
    (51) statement_list -> statement_list . statement
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

  ! shift/reduce conflict for WHILE resolved as shift
    ENDWHILE        reduce using rule 49 (compound_statement -> declaration_specifiers_list statement_list .)
    ENDIF           reduce using rule 49 (compound_statement -> declaration_specifiers_list statement_list .)
    ENDSWITCH       reduce using rule 49 (compound_statement -> declaration_specifiers_list statement_list .)
    ELSE            reduce using rule 49 (compound_statement -> declaration_specifiers_list statement_list .)
    ENDFOR          reduce using rule 49 (compound_statement -> declaration_specifiers_list statement_list .)
    ENDFUNCTION     reduce using rule 49 (compound_statement -> declaration_specifiers_list statement_list .)
    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

  ! WHILE           [ reduce using rule 49 (compound_statement -> declaration_specifiers_list statement_list .) ]

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 177
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    primary_expression             shift and go to state 49
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 175

    (62) jump_statement -> BREAK SEMI .

    ID              reduce using rule 62 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 62 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 62 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 62 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 62 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 62 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 62 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 62 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 62 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 62 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 62 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 62 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 62 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 62 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 62 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 62 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 62 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 62 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 62 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 62 (jump_statement -> BREAK SEMI .)
    BNOT            reduce using rule 62 (jump_statement -> BREAK SEMI .)
    INT_CONST_DEC   reduce using rule 62 (jump_statement -> BREAK SEMI .)
    INT_CONST_OCT   reduce using rule 62 (jump_statement -> BREAK SEMI .)
    INT_CONST_HEX   reduce using rule 62 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 62 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 62 (jump_statement -> BREAK SEMI .)
    ENDSWITCH       reduce using rule 62 (jump_statement -> BREAK SEMI .)
    ENDFUNCTION     reduce using rule 62 (jump_statement -> BREAK SEMI .)
    ENDWHILE        reduce using rule 62 (jump_statement -> BREAK SEMI .)
    ENDIF           reduce using rule 62 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 62 (jump_statement -> BREAK SEMI .)
    ENDFOR          reduce using rule 62 (jump_statement -> BREAK SEMI .)


state 176

    (59) iteration_statement -> DO compound_statement . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 188


state 177

    (51) statement_list -> statement_list statement .

    ID              reduce using rule 51 (statement_list -> statement_list statement .)
    CASE            reduce using rule 51 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 51 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 51 (statement_list -> statement_list statement .)
    IF              reduce using rule 51 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 51 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 51 (statement_list -> statement_list statement .)
    DO              reduce using rule 51 (statement_list -> statement_list statement .)
    FOR             reduce using rule 51 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 51 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 51 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 51 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 51 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 51 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 51 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 51 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 51 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 51 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 51 (statement_list -> statement_list statement .)
    NOT             reduce using rule 51 (statement_list -> statement_list statement .)
    BNOT            reduce using rule 51 (statement_list -> statement_list statement .)
    INT_CONST_DEC   reduce using rule 51 (statement_list -> statement_list statement .)
    INT_CONST_OCT   reduce using rule 51 (statement_list -> statement_list statement .)
    INT_CONST_HEX   reduce using rule 51 (statement_list -> statement_list statement .)
    FLOAT_CONST     reduce using rule 51 (statement_list -> statement_list statement .)
    CHAR_CONST      reduce using rule 51 (statement_list -> statement_list statement .)
    ENDFOR          reduce using rule 51 (statement_list -> statement_list statement .)
    ENDFUNCTION     reduce using rule 51 (statement_list -> statement_list statement .)
    ENDWHILE        reduce using rule 51 (statement_list -> statement_list statement .)
    ENDSWITCH       reduce using rule 51 (statement_list -> statement_list statement .)
    ENDIF           reduce using rule 51 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 51 (statement_list -> statement_list statement .)


state 178

    (52) labeled_statement -> ID COLON . statement
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 189
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    primary_expression             shift and go to state 49
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 179

    (55) selection_statement -> IF LPAREN . expression RPAREN compound_statement ENDIF
    (56) selection_statement -> IF LPAREN . expression RPAREN compound_statement ELSE compound_statement ENDIF
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 190
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 180

    (110) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 110 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 110 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 181

    (61) jump_statement -> GOTO ID SEMI .

    ID              reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    CASE            reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    DEFAULT         reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    SEMI            reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    IF              reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    SWITCH          reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    DO              reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    FOR             reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    BREAK           reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    PLUSPLUS        reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    MINUSMINUS      reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    STRING_LITERAL  reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    PLUS            reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    NOT             reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    BNOT            reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_DEC   reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_OCT   reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_HEX   reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    FLOAT_CONST     reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    CHAR_CONST      reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    ENDSWITCH       reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    ENDFUNCTION     reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    ENDWHILE        reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    ENDIF           reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    ELSE            reduce using rule 61 (jump_statement -> GOTO ID SEMI .)
    ENDFOR          reduce using rule 61 (jump_statement -> GOTO ID SEMI .)


state 182

    (64) jump_statement -> RETURN expression SEMI .

    ID              reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    BNOT            reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_DEC   reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_OCT   reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_HEX   reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    ENDSWITCH       reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    ENDFUNCTION     reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    ENDWHILE        reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    ENDIF           reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 64 (jump_statement -> RETURN expression SEMI .)
    ENDFOR          reduce using rule 64 (jump_statement -> RETURN expression SEMI .)


state 183

    (60) iteration_statement -> FOR LPAREN expression . SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (69) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 191
    COMMA           shift and go to state 106


state 184

    (54) labeled_statement -> DEFAULT COLON statement .

    ID              reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    PLUSPLUS        reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    MINUSMINUS      reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    BNOT            reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_DEC   reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_OCT   reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_HEX   reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_CONST     reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_CONST      reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    ENDFUNCTION     reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    ENDWHILE        reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    ENDSWITCH       reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    ENDIF           reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)
    ENDFOR          reduce using rule 54 (labeled_statement -> DEFAULT COLON statement .)


state 185

    (58) iteration_statement -> WHILE LPAREN expression . RPAREN compound_statement ENDWHILE
    (69) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 192
    COMMA           shift and go to state 106


state 186

    (53) labeled_statement -> CASE expression COLON . statement
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 193
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    primary_expression             shift and go to state 49
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 187

    (57) selection_statement -> SWITCH LPAREN expression . RPAREN compound_statement ENDSWITCH
    (69) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 194
    COMMA           shift and go to state 106


state 188

    (59) iteration_statement -> DO compound_statement WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 195


state 189

    (52) labeled_statement -> ID COLON statement .

    ID              reduce using rule 52 (labeled_statement -> ID COLON statement .)
    CASE            reduce using rule 52 (labeled_statement -> ID COLON statement .)
    DEFAULT         reduce using rule 52 (labeled_statement -> ID COLON statement .)
    SEMI            reduce using rule 52 (labeled_statement -> ID COLON statement .)
    IF              reduce using rule 52 (labeled_statement -> ID COLON statement .)
    SWITCH          reduce using rule 52 (labeled_statement -> ID COLON statement .)
    WHILE           reduce using rule 52 (labeled_statement -> ID COLON statement .)
    DO              reduce using rule 52 (labeled_statement -> ID COLON statement .)
    FOR             reduce using rule 52 (labeled_statement -> ID COLON statement .)
    GOTO            reduce using rule 52 (labeled_statement -> ID COLON statement .)
    BREAK           reduce using rule 52 (labeled_statement -> ID COLON statement .)
    CONTINUE        reduce using rule 52 (labeled_statement -> ID COLON statement .)
    RETURN          reduce using rule 52 (labeled_statement -> ID COLON statement .)
    PLUSPLUS        reduce using rule 52 (labeled_statement -> ID COLON statement .)
    MINUSMINUS      reduce using rule 52 (labeled_statement -> ID COLON statement .)
    STRING_LITERAL  reduce using rule 52 (labeled_statement -> ID COLON statement .)
    LPAREN          reduce using rule 52 (labeled_statement -> ID COLON statement .)
    PLUS            reduce using rule 52 (labeled_statement -> ID COLON statement .)
    MINUS           reduce using rule 52 (labeled_statement -> ID COLON statement .)
    NOT             reduce using rule 52 (labeled_statement -> ID COLON statement .)
    BNOT            reduce using rule 52 (labeled_statement -> ID COLON statement .)
    INT_CONST_DEC   reduce using rule 52 (labeled_statement -> ID COLON statement .)
    INT_CONST_OCT   reduce using rule 52 (labeled_statement -> ID COLON statement .)
    INT_CONST_HEX   reduce using rule 52 (labeled_statement -> ID COLON statement .)
    FLOAT_CONST     reduce using rule 52 (labeled_statement -> ID COLON statement .)
    CHAR_CONST      reduce using rule 52 (labeled_statement -> ID COLON statement .)
    ENDFUNCTION     reduce using rule 52 (labeled_statement -> ID COLON statement .)
    ENDWHILE        reduce using rule 52 (labeled_statement -> ID COLON statement .)
    ENDSWITCH       reduce using rule 52 (labeled_statement -> ID COLON statement .)
    ENDIF           reduce using rule 52 (labeled_statement -> ID COLON statement .)
    ELSE            reduce using rule 52 (labeled_statement -> ID COLON statement .)
    ENDFOR          reduce using rule 52 (labeled_statement -> ID COLON statement .)


state 190

    (55) selection_statement -> IF LPAREN expression . RPAREN compound_statement ENDIF
    (56) selection_statement -> IF LPAREN expression . RPAREN compound_statement ELSE compound_statement ENDIF
    (69) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 196
    COMMA           shift and go to state 106


state 191

    (60) iteration_statement -> FOR LPAREN expression SEMI . expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (3) expression_opt -> . empty
    (4) expression_opt -> . expression
    (117) empty -> .
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    SEMI            reduce using rule 117 (empty -> .)
    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    expression_opt                 shift and go to state 198
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 199
    unary_operator                 shift and go to state 45
    empty                          shift and go to state 197
    binary_expression              shift and go to state 54

state 192

    (58) iteration_statement -> WHILE LPAREN expression RPAREN . compound_statement ENDWHILE
    (47) compound_statement -> . statement_list
    (48) compound_statement -> . declaration_specifiers_list
    (49) compound_statement -> . declaration_specifiers_list statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list statement
    (24) declaration_specifiers_list -> . declaration_specifiers
    (25) declaration_specifiers_list -> . declaration_specifiers_list declaration_specifiers
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    type_specifier                 shift and go to state 137
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 147
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    statement_list                 shift and go to state 154
    primary_expression             shift and go to state 49
    declaration_specifiers         shift and go to state 142
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    type_qualifier                 shift and go to state 15
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    declaration_specifiers_list    shift and go to state 148
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 193

    (53) labeled_statement -> CASE expression COLON statement .

    ID              reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    CASE            reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    DEFAULT         reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    SEMI            reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    IF              reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    SWITCH          reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    WHILE           reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    DO              reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    FOR             reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    GOTO            reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    BREAK           reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    CONTINUE        reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    RETURN          reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    PLUSPLUS        reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    MINUSMINUS      reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    STRING_LITERAL  reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    LPAREN          reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    PLUS            reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    MINUS           reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    NOT             reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    BNOT            reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    INT_CONST_DEC   reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    INT_CONST_OCT   reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    INT_CONST_HEX   reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    FLOAT_CONST     reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    CHAR_CONST      reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    ENDFUNCTION     reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    ENDWHILE        reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    ENDSWITCH       reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    ENDIF           reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    ELSE            reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)
    ENDFOR          reduce using rule 53 (labeled_statement -> CASE expression COLON statement .)


state 194

    (57) selection_statement -> SWITCH LPAREN expression RPAREN . compound_statement ENDSWITCH
    (47) compound_statement -> . statement_list
    (48) compound_statement -> . declaration_specifiers_list
    (49) compound_statement -> . declaration_specifiers_list statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list statement
    (24) declaration_specifiers_list -> . declaration_specifiers
    (25) declaration_specifiers_list -> . declaration_specifiers_list declaration_specifiers
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    type_specifier                 shift and go to state 137
    compound_statement             shift and go to state 201
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 147
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    statement_list                 shift and go to state 154
    primary_expression             shift and go to state 49
    declaration_specifiers         shift and go to state 142
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    type_qualifier                 shift and go to state 15
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    declaration_specifiers_list    shift and go to state 148
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 195

    (59) iteration_statement -> DO compound_statement WHILE LPAREN . expression RPAREN
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 202
    unary_operator                 shift and go to state 45
    binary_expression              shift and go to state 54

state 196

    (55) selection_statement -> IF LPAREN expression RPAREN . compound_statement ENDIF
    (56) selection_statement -> IF LPAREN expression RPAREN . compound_statement ELSE compound_statement ENDIF
    (47) compound_statement -> . statement_list
    (48) compound_statement -> . declaration_specifiers_list
    (49) compound_statement -> . declaration_specifiers_list statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list statement
    (24) declaration_specifiers_list -> . declaration_specifiers
    (25) declaration_specifiers_list -> . declaration_specifiers_list declaration_specifiers
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    type_specifier                 shift and go to state 137
    compound_statement             shift and go to state 203
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 147
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    statement_list                 shift and go to state 154
    primary_expression             shift and go to state 49
    declaration_specifiers         shift and go to state 142
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    type_qualifier                 shift and go to state 15
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    declaration_specifiers_list    shift and go to state 148
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 197

    (3) expression_opt -> empty .

    SEMI            reduce using rule 3 (expression_opt -> empty .)
    RPAREN          reduce using rule 3 (expression_opt -> empty .)


state 198

    (60) iteration_statement -> FOR LPAREN expression SEMI expression_opt . SEMI expression_opt RPAREN compound_statement ENDFOR

    SEMI            shift and go to state 204


state 199

    (4) expression_opt -> expression .
    (69) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 4 (expression_opt -> expression .)
    RPAREN          reduce using rule 4 (expression_opt -> expression .)
    COMMA           shift and go to state 106


state 200

    (58) iteration_statement -> WHILE LPAREN expression RPAREN compound_statement . ENDWHILE

    ENDWHILE        shift and go to state 205


state 201

    (57) selection_statement -> SWITCH LPAREN expression RPAREN compound_statement . ENDSWITCH

    ENDSWITCH       shift and go to state 206


state 202

    (59) iteration_statement -> DO compound_statement WHILE LPAREN expression . RPAREN
    (69) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 207
    COMMA           shift and go to state 106


state 203

    (55) selection_statement -> IF LPAREN expression RPAREN compound_statement . ENDIF
    (56) selection_statement -> IF LPAREN expression RPAREN compound_statement . ELSE compound_statement ENDIF

    ENDIF           shift and go to state 209
    ELSE            shift and go to state 208


state 204

    (60) iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI . expression_opt RPAREN compound_statement ENDFOR
    (3) expression_opt -> . empty
    (4) expression_opt -> . expression
    (117) empty -> .
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    RPAREN          reduce using rule 117 (empty -> .)
    ID              shift and go to state 22
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    constant                       shift and go to state 39
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 34
    variable_declarator            shift and go to state 43
    expression_opt                 shift and go to state 210
    primary_expression             shift and go to state 49
    conditional_expression         shift and go to state 56
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 199
    unary_operator                 shift and go to state 45
    empty                          shift and go to state 197
    binary_expression              shift and go to state 54

state 205

    (58) iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .

    ID              reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    CASE            reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    DEFAULT         reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    SEMI            reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    IF              reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    SWITCH          reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    WHILE           reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    DO              reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    FOR             reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    GOTO            reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    BREAK           reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    CONTINUE        reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    RETURN          reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    PLUSPLUS        reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    MINUSMINUS      reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    STRING_LITERAL  reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    LPAREN          reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    PLUS            reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    MINUS           reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    NOT             reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    BNOT            reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    INT_CONST_DEC   reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    INT_CONST_OCT   reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    INT_CONST_HEX   reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    FLOAT_CONST     reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    CHAR_CONST      reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    ENDFUNCTION     reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    ENDWHILE        reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    ENDSWITCH       reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    ENDIF           reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    ELSE            reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)
    ENDFOR          reduce using rule 58 (iteration_statement -> WHILE LPAREN expression RPAREN compound_statement ENDWHILE .)


state 206

    (57) selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .

    ID              reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    CASE            reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    DEFAULT         reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    SEMI            reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    IF              reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    SWITCH          reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    WHILE           reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    DO              reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    FOR             reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    GOTO            reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    BREAK           reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    CONTINUE        reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    RETURN          reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    PLUSPLUS        reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    MINUSMINUS      reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    STRING_LITERAL  reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    LPAREN          reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    PLUS            reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    MINUS           reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    NOT             reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    BNOT            reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    INT_CONST_DEC   reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    INT_CONST_OCT   reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    INT_CONST_HEX   reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    FLOAT_CONST     reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    CHAR_CONST      reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    ENDFUNCTION     reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    ENDWHILE        reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    ENDSWITCH       reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    ENDIF           reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    ELSE            reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)
    ENDFOR          reduce using rule 57 (selection_statement -> SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH .)


state 207

    (59) iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .

    ID              reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    SEMI            reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    GOTO            reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    BNOT            reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    INT_CONST_DEC   reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    INT_CONST_OCT   reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    INT_CONST_HEX   reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    FLOAT_CONST     reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    CHAR_CONST      reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    ENDFUNCTION     reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    ENDWHILE        reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    ENDSWITCH       reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    ENDIF           reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)
    ENDFOR          reduce using rule 59 (iteration_statement -> DO compound_statement WHILE LPAREN expression RPAREN .)


state 208

    (56) selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE . compound_statement ENDIF
    (47) compound_statement -> . statement_list
    (48) compound_statement -> . declaration_specifiers_list
    (49) compound_statement -> . declaration_specifiers_list statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list statement
    (24) declaration_specifiers_list -> . declaration_specifiers
    (25) declaration_specifiers_list -> . declaration_specifiers_list declaration_specifiers
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    type_specifier                 shift and go to state 137
    compound_statement             shift and go to state 211
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 147
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    statement_list                 shift and go to state 154
    primary_expression             shift and go to state 49
    declaration_specifiers         shift and go to state 142
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    type_qualifier                 shift and go to state 15
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    declaration_specifiers_list    shift and go to state 148
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 209

    (55) selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .

    ID              reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    CASE            reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    DEFAULT         reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    SEMI            reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    IF              reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    SWITCH          reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    WHILE           reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    DO              reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    FOR             reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    GOTO            reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    BREAK           reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    CONTINUE        reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    RETURN          reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    PLUSPLUS        reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    MINUSMINUS      reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    STRING_LITERAL  reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    LPAREN          reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    PLUS            reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    MINUS           reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    NOT             reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    BNOT            reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    INT_CONST_DEC   reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    INT_CONST_OCT   reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    INT_CONST_HEX   reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    FLOAT_CONST     reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    CHAR_CONST      reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    ENDFUNCTION     reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    ENDWHILE        reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    ENDSWITCH       reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    ENDIF           reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    ELSE            reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)
    ENDFOR          reduce using rule 55 (selection_statement -> IF LPAREN expression RPAREN compound_statement ENDIF .)


state 210

    (60) iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt . RPAREN compound_statement ENDFOR

    RPAREN          shift and go to state 212


state 211

    (56) selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement . ENDIF

    ENDIF           shift and go to state 213


state 212

    (60) iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN . compound_statement ENDFOR
    (47) compound_statement -> . statement_list
    (48) compound_statement -> . declaration_specifiers_list
    (49) compound_statement -> . declaration_specifiers_list statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement_list statement
    (24) declaration_specifiers_list -> . declaration_specifiers
    (25) declaration_specifiers_list -> . declaration_specifiers_list declaration_specifiers
    (17) statement -> . labeled_statement
    (18) statement -> . expression_statement
    (19) statement -> . selection_statement
    (20) statement -> . iteration_statement
    (21) statement -> . jump_statement
    (22) declaration_specifiers -> . type_qualifier type_specifier init_declarator_list SEMI
    (23) declaration_specifiers -> . type_specifier init_declarator_list SEMI
    (52) labeled_statement -> . ID COLON statement
    (53) labeled_statement -> . CASE expression COLON statement
    (54) labeled_statement -> . DEFAULT COLON statement
    (66) expression_statement -> . expression SEMI
    (67) expression_statement -> . SEMI
    (55) selection_statement -> . IF LPAREN expression RPAREN compound_statement ENDIF
    (56) selection_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF
    (57) selection_statement -> . SWITCH LPAREN expression RPAREN compound_statement ENDSWITCH
    (58) iteration_statement -> . WHILE LPAREN expression RPAREN compound_statement ENDWHILE
    (59) iteration_statement -> . DO compound_statement WHILE LPAREN expression RPAREN
    (60) iteration_statement -> . FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR
    (61) jump_statement -> . GOTO ID SEMI
    (62) jump_statement -> . BREAK SEMI
    (63) jump_statement -> . CONTINUE SEMI
    (64) jump_statement -> . RETURN expression SEMI
    (65) jump_statement -> . RETURN SEMI
    (31) type_qualifier -> . CONST
    (28) type_specifier -> . INTEGER
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . STRING
    (68) expression -> . assignment_expression
    (69) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . conditional_expression
    (71) assignment_expression -> . variable_declarator assignment_operator conditional_expression
    (74) conditional_expression -> . binary_expression
    (36) variable_declarator -> . identifier LBRACKET constant_expression_opt RBRACKET
    (37) variable_declarator -> . identifier
    (75) binary_expression -> . unary_expression
    (76) binary_expression -> . binary_expression TIMES binary_expression
    (77) binary_expression -> . binary_expression DIVIDE binary_expression
    (78) binary_expression -> . binary_expression MOD binary_expression
    (79) binary_expression -> . binary_expression PLUS binary_expression
    (80) binary_expression -> . binary_expression MINUS binary_expression
    (81) binary_expression -> . binary_expression RSHIFT binary_expression
    (82) binary_expression -> . binary_expression LSHIFT binary_expression
    (83) binary_expression -> . binary_expression LT binary_expression
    (84) binary_expression -> . binary_expression LE binary_expression
    (85) binary_expression -> . binary_expression GE binary_expression
    (86) binary_expression -> . binary_expression GT binary_expression
    (87) binary_expression -> . binary_expression EQ binary_expression
    (88) binary_expression -> . binary_expression NE binary_expression
    (89) binary_expression -> . binary_expression BAND binary_expression
    (90) binary_expression -> . binary_expression BOR binary_expression
    (91) binary_expression -> . binary_expression BXOR binary_expression
    (92) binary_expression -> . binary_expression AND binary_expression
    (93) binary_expression -> . binary_expression OR binary_expression
    (111) identifier -> . ID
    (94) unary_expression -> . function_expression
    (95) unary_expression -> . primary_expression
    (96) unary_expression -> . PLUSPLUS unary_expression
    (97) unary_expression -> . MINUSMINUS unary_expression
    (98) unary_expression -> . unary_operator unary_expression
    (103) function_expression -> . identifier LPAREN argument_expression_list RPAREN
    (104) function_expression -> . identifier LPAREN RPAREN
    (105) primary_expression -> . variable_declarator
    (106) primary_expression -> . constant
    (107) primary_expression -> . STRING_LITERAL
    (108) primary_expression -> . LPAREN expression RPAREN
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . MINUS
    (101) unary_operator -> . NOT
    (102) unary_operator -> . BNOT
    (112) constant -> . INT_CONST_DEC
    (113) constant -> . INT_CONST_OCT
    (114) constant -> . INT_CONST_HEX
    (115) constant -> . FLOAT_CONST
    (116) constant -> . CHAR_CONST

    ID              shift and go to state 155
    CASE            shift and go to state 145
    DEFAULT         shift and go to state 143
    SEMI            shift and go to state 152
    IF              shift and go to state 156
    SWITCH          shift and go to state 146
    WHILE           shift and go to state 144
    DO              shift and go to state 151
    FOR             shift and go to state 139
    GOTO            shift and go to state 134
    BREAK           shift and go to state 150
    CONTINUE        shift and go to state 140
    RETURN          shift and go to state 136
    CONST           shift and go to state 2
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 1
    STRING          shift and go to state 11
    PLUSPLUS        shift and go to state 46
    MINUSMINUS      shift and go to state 51
    STRING_LITERAL  shift and go to state 52
    LPAREN          shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 40
    NOT             shift and go to state 35
    BNOT            shift and go to state 38
    INT_CONST_DEC   shift and go to state 48
    INT_CONST_OCT   shift and go to state 55
    INT_CONST_HEX   shift and go to state 47
    FLOAT_CONST     shift and go to state 42
    CHAR_CONST      shift and go to state 37

    expression_statement           shift and go to state 132
    constant                       shift and go to state 39
    unary_expression               shift and go to state 34
    iteration_statement            shift and go to state 133
    type_specifier                 shift and go to state 137
    compound_statement             shift and go to state 214
    selection_statement            shift and go to state 153
    variable_declarator            shift and go to state 43
    statement                      shift and go to state 147
    unary_operator                 shift and go to state 45
    assignment_expression          shift and go to state 75
    statement_list                 shift and go to state 154
    primary_expression             shift and go to state 49
    declaration_specifiers         shift and go to state 142
    jump_statement                 shift and go to state 149
    binary_expression              shift and go to state 54
    type_qualifier                 shift and go to state 15
    labeled_statement              shift and go to state 135
    conditional_expression         shift and go to state 56
    declaration_specifiers_list    shift and go to state 148
    function_expression            shift and go to state 57
    identifier                     shift and go to state 58
    expression                     shift and go to state 141

state 213

    (56) selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .

    ID              reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    CASE            reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    DEFAULT         reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    SEMI            reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    IF              reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    SWITCH          reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    WHILE           reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    DO              reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    FOR             reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    GOTO            reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    BREAK           reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    CONTINUE        reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    RETURN          reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    PLUSPLUS        reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    MINUSMINUS      reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    STRING_LITERAL  reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    LPAREN          reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    PLUS            reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    MINUS           reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    NOT             reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    BNOT            reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    INT_CONST_DEC   reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    INT_CONST_OCT   reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    INT_CONST_HEX   reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    FLOAT_CONST     reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    CHAR_CONST      reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    ENDFUNCTION     reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    ENDWHILE        reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    ENDSWITCH       reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    ENDIF           reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    ELSE            reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)
    ENDFOR          reduce using rule 56 (selection_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement ENDIF .)


state 214

    (60) iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement . ENDFOR

    ENDFOR          shift and go to state 215


state 215

    (60) iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .

    ID              reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    CASE            reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    DEFAULT         reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    SEMI            reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    IF              reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    SWITCH          reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    WHILE           reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    DO              reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    FOR             reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    GOTO            reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    BREAK           reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    CONTINUE        reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    RETURN          reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    PLUSPLUS        reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    MINUSMINUS      reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    STRING_LITERAL  reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    LPAREN          reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    PLUS            reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    MINUS           reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    NOT             reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    BNOT            reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    INT_CONST_DEC   reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    INT_CONST_OCT   reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    INT_CONST_HEX   reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    FLOAT_CONST     reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    CHAR_CONST      reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    ENDFUNCTION     reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    ENDWHILE        reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    ENDSWITCH       reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    ENDIF           reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    ELSE            reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)
    ENDFOR          reduce using rule 60 (iteration_statement -> FOR LPAREN expression SEMI expression_opt SEMI expression_opt RPAREN compound_statement ENDFOR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PPHASH in state 16 resolved as shift
WARNING: shift/reduce conflict for CONST in state 16 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 16 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 16 resolved as shift
WARNING: shift/reduce conflict for STRING in state 16 resolved as shift
WARNING: shift/reduce conflict for VOID in state 16 resolved as shift
WARNING: shift/reduce conflict for PPHASH in state 23 resolved as shift
WARNING: shift/reduce conflict for CONST in state 23 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 23 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 23 resolved as shift
WARNING: shift/reduce conflict for STRING in state 23 resolved as shift
WARNING: shift/reduce conflict for VOID in state 23 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 148 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 174 resolved as shift
